{"version":3,"sources":["TurtleLine.js","LSystem.js","Form.js","App.js","index.js"],"names":["TurtleLine","pathData","this","props","line","map","p","get","join","className","stroke","d","Component","LSystem","state","lines","Immutable","List","rule","currentRule","rules","axiom","i","loops","expandRules","inputString","outputString","replacements","split","subst","findString","replace","trim","newString","push","token","matched","replacement","angle","Math","PI","currentAngle","currentX","Number","startX","currentY","startY","locations","Stack","step","generateRules","c","point1","Map","x","y","cos","toRadians","sin","point2","setState","prevState","currPos","X","Y","A","oldPos","first","pop","runTurtle","previousProps","previousState","index","key","Form","handleChange","event","target","name","value","submitForm","handleSubmit","initialState","type","size","onChange","onClick","App","newRule","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.48df728c.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass TurtleLine extends Component {  \n  render() {\n    const { line } = this.props\n    \n    const pathData = \"M \" + line\n      .map(p => p.get('x') + ' ' + p.get('y'))\n      .join(\" L \");\n\n    return <path className='path' stroke='black' d={pathData} />;\n  }\n}\n\nexport default TurtleLine;\n","import React, { Component } from 'react'\nimport Immutable from 'immutable'\nimport TurtleLine from './TurtleLine'\n\n\nclass LSystem extends Component {\n  constructor(props) {\n    /*\n      The propery handed in should be an object called \"rule\", with\n      the following keys:\n        axiom: The initial string\n        numloops: How many times to run the replacement algorithm\n        replacements: One or more comma-separated replacement rules, of the format \"X = Y\" \n        step: How many pixels to draw each line\n        angle: The angle to turn when turning\n        startX: The X position at which to start drawing\n        startY: The Y position at which to start drawing\n    */\n    super(props);\n    \n    this.state = {\n      // An empty list of lines that will be filled in when drawing\n      lines: new Immutable.List(),\n      \n      // The rules for drawing\n      rule: this.props.rule,\n    }\n\n  }\n  \n  generateRules() {\n    \n    const currentRule = this.props.rule;\n    \n    var rules = currentRule.axiom;\n    for (var i = 0; i < currentRule.loops; i++) {\n      rules = this.expandRules(rules);\n    }\n    return rules;\n  }\n  \n  expandRules(inputString) {\n    var outputString = '';\n    var replacements = [];\n    const currentRule = this.props.rule;\n    \n    for(const replacement of currentRule.replacements.split(',')) {\n      const rule = replacement.split('=');\n      const subst = {findString: rule[0].replace(/\\(/,\"\").trim(), newString: rule[1].replace(/\\)/,\"\").trim()};\n      \n      replacements.push(subst);\n    }\n    \n    for(const token of inputString) {\n      var matched = false;\n      for(const replacement of replacements) {\n        if (replacement.findString === token) {\n          matched = true;\n          outputString += replacement.newString;\n          break;\n        }  \n      }\n      \n      if (! matched) outputString += token;\n    }\n    \n      \n    return outputString;\n  }\n  \n  toRadians (angle) {\n    return angle * (Math.PI / 180);\n  }\n  \n  runTurtle() {\n    \n    const currentRule = this.props.rule;\n    \n    var currentAngle = 90;\n    var currentX = Number(currentRule.startX);\n    var currentY = Number(currentRule.startY);\n    var locations = Immutable.Stack();\n    \n    const angle = Number(currentRule.angle);\n    const step = Number(currentRule.step);\n    const rules = this.generateRules();\n    \n    // For each character in the string\n    for(const c of rules) {\n      if (c === 'F' || c === 'G') {\n        // If it's an \"F\", add a line and move the turtle\n        const point1 = new Immutable.Map({x: currentX, y: currentY,});\n        currentX = currentX + step * Math.cos(this.toRadians(currentAngle));\n        currentY = currentY - step * Math.sin(this.toRadians(currentAngle));\n        const point2 = new Immutable.Map({x: currentX, y: currentY,});\n        \n        this.setState(prevState => {\n          return {\n            lines: prevState.lines.push(Immutable.List([point1, point2])),\n          };\n        });\n      } else if (c === '+') {\n        // If it's a turn, change the angle\n        currentAngle += angle; // turn left\n      } else if (c === '-') {\n        currentAngle -= angle; // turn right)\n      } else if (c === '[') {\n        // Push current value of X,Y from locations\n        const currPos = {X: currentX, Y: currentY, A: currentAngle};\n        locations = locations.push(currPos);\n      } else if (c === ']') {\n        // Reset current value of X,Y to that popped from locations\n        const oldPos = locations.first();\n        locations = locations.pop();\n        currentX = oldPos.X;\n        currentY = oldPos.Y;\n        currentAngle = oldPos.A;\n        //alert(\"now at \" + currentX)\n      } else if (c === 'X' || c === 'Y') {\n        // For completeness; no-op\n      }\n    }\n  }\n  \n  \n  componentDidMount() {\n    // The first time this loads, run the\n    // turtle to draw the needed lines.\n    this.runTurtle();\n  }\n  \n  componentDidUpdate(previousProps, previousState) {\n    // Because componentDidUpdate will get called on\n    // any update of state (including, for instance,\n    // drawing a new line), only reset and redraw\n    // if the state being changed is the rule.\n    // (This feels really hacky; TODO: Rethink this.)\n    if (previousProps.rule !== this.props.rule) {\n      this.setState(prevState => {\n        return {\n          lines: new Immutable.List(),\n        };\n      });\n      this.runTurtle();\n    }\n  }\n  \n  render() {\n    const lines = this.state.lines;\n    return (\n      <svg className=\"drawArea\">\n      {lines.map((line, index) => (\n        <TurtleLine key={index} line={line} />\n      ))}\n    </svg>\n    );\n  }\n}\n\nexport default LSystem;\n","import React, { Component } from 'react'\n\nclass Form extends Component {\n  constructor(props) {\n    super(props)\n\n    this.initialState = {\n      angle: props.rule.angle,\n      step: props.rule.step,\n      axiom: props.rule.axiom,\n      replacements: props.rule.replacements,\n      loops: props.rule.loops,\n      startX: props.rule.startX,\n      startY: props.rule.startY\n    }\n\n    this.state = this.initialState\n  }\n  \n  handleChange = event => {\n    const { name, value } = event.target\n  \n    this.setState({\n      [name]: value,\n    })\n  }\n  \n  submitForm = () => {\n    this.props.handleSubmit(this.state)\n  }\n  \n  render() {\n    const { angle,\n      step,\n      axiom,\n      replacements,\n      loops,\n      startX,\n      startY } = this.state;\n  \n    return (\n      \n      <div className=\"instructions\">\n      <h3>Instructions</h3>\n      <p>\n        To run an L-System, enter the required information and press \"submit\". Some notes:\n        <ul>\n        <li>The \"Replacement Rule\" should consist one or more comma-separated replacement rules, of the format \"( X = Y )\" -- see examples, below</li>\n        <li>PLEASE don't use more than 6 recursions!</li>\n        <li>If you're having trouble seeing the entire resulting drawing, try reducing the \"Step Size\" to make it smaller</li>\n        <li>NOTE: INPUTS ARE NOT CURRENTLY BEING SANITIZED! If you get an error, probably it's a parsing issue. Check your rules in particular.</li>\n        </ul>\n      </p>\n      \n      <hr />\n      \n      <h3>L-System rules</h3>\n      <form>\n        <label>Axiom (initial string)</label>\n        <input\n          type=\"text\"\n          name=\"axiom\"\n          size=\"10\"\n          value={axiom}\n          onChange={this.handleChange} />\n        \n        <br />\n        <label>Replacement Rules</label>\n        <input\n          type=\"text\"\n          name=\"replacements\"\n          size=\"50\"\n          value={replacements}\n          onChange={this.handleChange} />\n        \n        <br />\n        <label>Angle for Turns</label>\n        <input\n          type=\"text\"\n          name=\"angle\"\n          size=\"5\"\n          value={angle}\n          onChange={this.handleChange} />\n          \n        <br />\n        <label>Step Size (length of line)</label>\n        <input\n          type=\"text\"\n          name=\"step\"\n          size=\"5\"\n          value={step}\n          onChange={this.handleChange} />\n          \n        <br />\n        <label>Loops (number of recursions)</label>\n        <input\n          type=\"text\"\n          name=\"loops\"\n          size=\"5\"\n          value={loops}\n          onChange={this.handleChange} />\n          \n        <br />\n        <label>Initial X Position</label>\n        <input\n          type=\"text\"\n          name=\"startX\"\n          size=\"5\"\n          value={startX}\n          onChange={this.handleChange} />\n        <label>Initial Y Position</label>\n        <input\n          type=\"text\"\n          name=\"startY\"\n          size=\"5\"\n          value={startY}\n          onChange={this.handleChange} />\n          \n        <br />\n        <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\n      </form>\n      \n      <hr />\n      \n      <h3>Examples</h3>\n      <p>\n      <ul>\n      <li>Sierpinski triangle:\n        <ul>\n          <li>Axiom: F-G-G</li>\n          <li>Replacement Rules: (F = F-G+F+G-F), (G = GG)</li>\n          <li>Angle: 120</li>\n          <li>Step Size: 7</li>\n          <li>Loops: 6</li>\n          <li>Initial X: 10</li>\n          <li>Initial Y: 600</li>\n        </ul>\n      </li>\n      \n      <li>Fractal plant:\n        <ul>\n          <li>Axiom: X</li>\n          <li>Replacement Rules: (X = F+[[X]-X]-F[-FX]+X), (F = FF)</li>\n          <li>Angle: 25</li>\n          <li>Step Size: 3</li>\n          <li>Loops: 6</li>\n          <li>Initial X: 200</li>\n          <li>Initial Y: 600</li>\n        </ul>\n      </li>\n      \n      \n      <li>Koch curve\n        <ul>\n          <li>Axiom: F</li>\n          <li>Replacement Rules: (F = F+F-F-F+F)</li>\n          <li>Angle: 90</li>\n          <li>Step Size: 4</li>\n          <li>Loops: 4</li>\n          <li>Initial X: 300</li>\n          <li>Initial Y: 600</li>\n        </ul>\n      </li>\n      \n      \n      <li>Dragon curve\n        <ul>\n          <li>Axiom: FX</li>\n          <li>Replacement Rules: (X = X+YF+), (Y = -FX-Y)</li>\n          <li>Angle: 90</li>\n          <li>Step Size: 4</li>\n          <li>Loops: 12 <i>(Dragons get special dispensation for extra loops)</i></li>\n          <li>Initial X: 300</li>\n          <li>Initial Y: 200</li>\n        </ul>\n      </li>\n      \n      </ul>\n      </p>\n      </div>\n    );\n  }\n}\n\n  export default Form;","import React, { Component } from 'react'\nimport LSystem from './LSystem'\nimport Form from './Form'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n  \n    \n    this.initialState = {\n      \n      // Sierpinski triangle\n      rule: {\n        angle: '120',\n        step: '7',\n        axiom: 'F-G-G',\n        replacements: '(F = F-G+F+G-F), (G = GG)',\n        loops: '6',\n        startX: '10',\n        startY: '600'\n      }\n      \n\n          \n    }\n  \n    this.state = this.initialState\n  }\n\n  handleSubmit = newRule => {\n    \n    this.setState({ rule: newRule });\n  }\n\n  \n  render() {\n    const { rule } = this.state\n    \n    return (\n    <div>\n      <div className=\"container\">\n        <Form handleSubmit={this.handleSubmit} rule={rule}/>\n        <LSystem rule={rule} />\n      </div>\n\n    </div>\n    )\n    \n  }\n}\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}