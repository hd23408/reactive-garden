{"version":3,"sources":["TurtleLine.js","TurtleShape.js","LSystem.js","Organisms.js","Form.js","Home.js","Garden.js","Intro.js","Outro.js","App.js","index.js"],"names":["TurtleLine","this","props","line","color","pathData","map","p","get","join","className","stroke","d","Component","TurtleShape","turtleLines","visibility","lines","index","key","LSystem","sleep","milliseconds","Promise","resolve","setTimeout","state","turtleInstructions","Immutable","List","needsToGrow","currentRule","rule","instructions","axiom","addGrowSteps","replacements","split","subst","findString","replace","trim","newString","push","turtleString","expandInstructions","i","loops","runTurtle","setState","prevState","inputString","generation","debug","outputString","console","log","token","matched","replacement","angle","Math","PI","min","max","floor","random","item","ruleAngle","Number","ruleStep","step","fColor","toUpperCase","gColor","bangColor","currentAngle","currentX","startX","currentY","startY","locations","Stack","stepColor","stepSize","turnAngle","turnDirection","length","c","charAt","String","randomInteger","padStart","wrongStepChance","n","point1","Map","x","y","cos","toRadians","sin","point2","wrongAngleChance","wrongTurnChance","currPos","X","Y","A","oldPos","first","pop","inGrowth","size","drawLSystem","grow","nextProps","nextState","previousProps","previousState","turtle","Organisms","OrderedMap","set","rules","gardenStep","gardenLoops","ShowPreviousRules","params","prevRules","type","value","onClick","name","disabled","Form","handleChange","event","target","checked","fillRules","newRule","submitForm","randomNumberForFormSubmittal","handleSubmit","mutate","replacementArray","coinFlip","ruleToChange","validCharacters","newReplacements","validChar","concat","filter","pos","indexOf","charToAdd","posToAdd","substr","deletionResult","deleteFromRule","found","ruleIndex","slice","prevReplacements","revert","getLink","link","window","location","origin","encodeURIComponent","el","document","createElement","body","appendChild","select","execCommand","removeChild","initialState","j","posToDelete","result","deleteStartingAt","k","self","toArray","onChange","Home","allOrgs","toList","numOrgs","values","queryString","parse","search","randomIndex","Object","assign","Garden","triggerBreeze","a","async","wave","shuffle","newOrganisms","organisms","iteration","forceUpdate","org","randomNumber","Intro","showAnswer","element","getElementById","ReactDOM","findDOMNode","style","display","turnPage","querySelectorAll","forEach","refs","id","page","ref","href","src","alt","width","Outro","App","basename","to","path","component","render"],"mappings":"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","file":"static/js/main.05beea5e.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass TurtleLine extends Component {  \n  render() {\n    const { line, color } = this.props;\n    \n    const pathData = \"M \" + line\n      .map(p => p.get('x') + ' ' + p.get('y'))\n      .join(\" L \");\n\n    return <path className='path' stroke={color} d={pathData} />;\n    \n  }\n}\n\nexport default TurtleLine;\n","import React, { Component } from 'react'\nimport TurtleLine from './TurtleLine'\n\nclass TurtleShape extends Component {  \n  \n  render() {\n    const turtleLines = this.props.turtleLines;\n    const visibility = this.props.visibility;\n    return (\n      <svg className={visibility}>\n        {turtleLines.map((lines, index) => (\n          <TurtleLine key={index} line={lines.get(\"line\")} color={lines.get(\"color\")} />\n        ))}\n      </svg>\n    );\n    \n  }\n}\n\nexport default TurtleShape;\n","import React, { Component } from 'react'\nimport Immutable from 'immutable'\nimport TurtleShape from './TurtleShape'\n\nclass LSystem extends Component {\n  constructor(props) {\n    /*\n      The propery handed in should be an object called \"rule\", with\n      the following keys:\n        axiom: The initial string\n        numloops: How many times to run the replacement algorithm\n        replacements: One or more comma-separated replacement rules, of the format \"X = Y\" \n        step: How many pixels to draw each line\n        angle: The angle to turn when turning\n        startX: The X position at which to start drawing\n        startY: The Y position at which to start drawing\n        fColor,\n        gColor,\n        bangColor: The color codes to use for F, G, and ! lines respectively (defaults to \"random\")\n        currentRule: Boolean saying whether to draw the growing process or jump straight to the final design\n    */\n    super(props);\n    \n    /*\n      In this component's state, we'll keep track of the following:\n        turtleInstructions: A list of the expanded instructions (one entry for\n            each loop through the rewriting process)\n        turtleLines: A list of structures which contain the following:\n            visibility: The class names for the wrapping svg object \n            lines: A list of the actual TurtleLine components that will get rendered --\n                  these are (somewhat confusingly) a Map with keys \"line\" (X/Y coordinates as a List)\n                  and \"color\" (a color for that particular line)\n        needsToGrow: For complicated React reasons, a boolean indicating whether or not\n            we've gone through the \"growing\" render process for this particular L-system\n    */\n    \n    this.state = {\n      turtleInstructions: Immutable.List(),\n      turtleLines: Immutable.List(),\n      needsToGrow: false,\n    }\n\n  }\n  \n  /*\n    The main function that will generate the turtle drawing instructions\n    for each iteration, and populate this.state accordingly.\n  */\n  drawLSystem() {\n    const currentRule = this.props.rule;  // The information about how to build the system\n    var instructions = currentRule.axiom; // The starting point\n    var addGrowSteps = ('addGrowSteps' in currentRule && \n      currentRule.addGrowSteps); // Whether or not to add all of the \"steps\" to show \"growth\"\n    var replacements = []; // The actual replacement rules to perform (a list of objects  \n                           // with \"findString\" and \"newString\" keys)\n      \n    const debug = false; // Will output to console.log with replacement string information\n    \n    // Parse the replacement instructions\n    for (const replacement of currentRule.replacements.split(',')) {\n      const rule = replacement.split('=');\n      const subst = {findString: rule[0].replace(/\\(/,\"\").trim(), newString: rule[1].replace(/\\)/,\"\").trim()};\n      replacements.push(subst);\n    }\n    \n    // Loop N times, and for each loop, expand the instructions\n    // and create the relevant TurtleLines\n    for (var i = 0; i < currentRule.loops; i++) {\n      const turtleString = this.expandInstructions(instructions, replacements, i, debug);\n      \n      // If we're supposed to add each of the growth \"steps\"\n      // (or if this is the last step), add it to the state\n      var add = (addGrowSteps || i === currentRule.loops - 1);\n      if (add) {\n        const turtleLines = this.runTurtle(turtleString);\n        // Add this loop's instructions and TurtleLines to our state\n        this.setState(prevState => {\n          return {\n            turtleInstructions: prevState.turtleInstructions.push(turtleString),\n            turtleLines: prevState.turtleLines.push(turtleLines),\n          };\n        });\n      }; \n      \n      // Reset the instructions to the current turtle string in preparation for the next loop\n      instructions = turtleString;\n    }\n    \n    // After we're done updating state with all of the appropriate turtle lines,\n    // indicate to ourselves that we need to grow. (i.e. to show the actual rendering of the lines)\n    this.setState(prevState => {\n        return {\n          needsToGrow: true,\n        };\n    });\n  }\n  \n  \n  /* \n    Expansion function for a given \"loop\" of instruction generation\n  */\n  expandInstructions(inputString, replacements, generation, debug) {\n    \n    var outputString = '';\n    \n    if (debug) {\n      console.log(\"----------------\");\n      console.log(\" Generation \" + generation);\n      console.log(\"Starting with: \" + inputString);\n    }\n    \n    for(const token of inputString) {\n      var matched = false;\n      \n      if (token === '!') {\n        // If an exclamation point is in the input string, it needs\n        // to get \"older\" -- its age is tracked by having a bunch of\n        // '*' symbols after it (one '|' for each generation older than one)\n        outputString += \"!*\";\n        // any other \"*\"s after it will just be passed through as normal\n        if (debug) console.log(\"Replacing ! with !*\");\n        \n      } else {\n        \n        for(const replacement of replacements) {\n          if (replacement.findString === token) {\n            matched = true;\n            outputString += replacement.newString;\n            if (debug) console.log(\"Replacing \" + replacement.findString + \" with \" + replacement.newString);\n            break;\n          }  \n        }\n        if (! matched) {\n          if (debug) console.log(\"Adding \" + token + \" as is\")\n          outputString += token; \n        }\n      }\n    }\n    \n    if (debug) {\n      console.log(\"Final expansion: \");\n      console.log(outputString);\n    }\n    \n    return outputString;\n  }\n  \n  \n  /*\n    Utility functions to make the math easier\n  */\n  toRadians(angle) {\n    return angle * (Math.PI / 180);\n  }\n  randomInteger(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) ) + min;\n  }\n  \n  /*\n    Function to send the turtle along the path of following a particular\n    instruction set and drawing out the lines necessary for it; note that\n    these lines are hidden to begin with, and need to go through the \"grow\"\n    process in order to be visible\n  */\n  runTurtle(item) {\n    // Get the base, constant information about this rule\n    const instructions = item;\n    const currentRule = this.props.rule;\n    const ruleAngle = Number(currentRule.angle);\n    const ruleStep = Number(currentRule.step);\n    \n    // Set our initial colors\n    var fColor = \"RANDOM\";\n    if ('fColor' in currentRule) fColor = currentRule.fColor;\n    fColor = fColor.toUpperCase();\n    var gColor = \"RANDOM\";\n    if ('gColor' in currentRule) gColor = currentRule.gColor;\n    gColor = gColor.toUpperCase();\n    var bangColor = \"RANDOM\";\n    if ('bangColor' in currentRule) bangColor = currentRule.bangColor;\n    bangColor = bangColor.toUpperCase();\n    \n    // Set our initial angle and X/Y coordinates\n    var currentAngle = 90;\n    var currentX = Number(currentRule.startX);\n    var currentY = Number(currentRule.startY);\n    var locations = Immutable.Stack();\n    \n    // This structure is what we'll ultimately add to this.state.turtleLines;\n    // Note that it's hidden by default in the CSS (the \"grow\" function shows it)\n    var turtleLines = {\n      visibility: \"hidden drawing\",\n      lines: Immutable.List(),\n    };\n    \n    // Initial values for variables that we'll use in the loop\n    var stepColor = \"#000000\";\n    var stepSize = ruleStep;\n    var turnAngle = ruleAngle;\n    var turnDirection = '+';\n    \n    // Okay, now loop over each character in the string\n    for (var i = 0; i < instructions.length; i++) {\n      const c = instructions.charAt(i).toUpperCase();\n      \n      // F and G mean \"draw the turtle one interval\"\n      if (c === 'F' || c === 'G' || c === '!') {\n        \n        // Set the color\n        if (c === 'F') {\n          stepColor = fColor;\n        } else if (c === 'G') {\n          stepColor = gColor;\n        } else if (c ==='!') {\n          stepColor = bangColor;\n        }\n        if (stepColor === 'RANDOM') {\n          stepColor = \"#00\" + String(this.randomInteger(6666, 9999)).padStart(4, '0');\n        }\n        \n        // Set the length; start with what the rule says\n        stepSize = ruleStep;\n        \n        // Assuming it's not a \"!\" (we handle !s differently, below),\n        // Set the step size based on what the \"wrongStepChance\"\n        // is set to. (If the step size is supposed to be \"wrong\",\n        // the set it to a random size between 1 and twice the current step.)\n        if (c !== '!' && Math.random() < currentRule.wrongStepChance) {\n          stepSize = this.randomInteger(1, (2 * ruleStep));\n        }\n        \n        // If it's an exclamation point, we need to find out how big it's\n        // supposed to be depending on how many \"*\"s come after it\n        if (c === '!') {\n          var n = 1;\n          while (i + n < instructions.length && instructions.charAt(i + n) === '*') n++;\n          // Skootch forward to the end of the \"*\"s (less one, because the\n          // loop will add one to us regardless).\n          i = i + n - 1;\n          \n          // Okay, now we've moved our \"cursor\" through the instructions \n          // to the appropriate place, and 'n' contains the number of \"step sizes\" \n          // to move; multiply the original \"rule\" step size by n for this line.\n          stepSize = ruleStep * n;\n        }  \n        \n        // FINALLY! Add a line and move the turtle\n        const point1 = new Immutable.Map({x: currentX, y: currentY,});\n        currentX = currentX + stepSize * Math.cos(this.toRadians(currentAngle));\n        currentY = currentY - stepSize * Math.sin(this.toRadians(currentAngle));\n        const point2 = new Immutable.Map({x: currentX, y: currentY,});\n        \n        turtleLines.lines = turtleLines.lines.push(Immutable.Map({\n          line: Immutable.List([point1, point2]), \n          color: stepColor,\n        }));\n        \n      } else if (c === '+' || c === '-') {\n        \n        // Adjust the angle based on the rule's \"wrongAngleChance\")\n        turnAngle = ruleAngle;\n        if (Math.random() < currentRule.wrongAngleChance) {\n          // Add between -10 and 10 degrees so as not to mess \n          // with it TOO much\n          turnAngle = this.randomInteger(-10, 10);\n        }\n        \n        // Start with the prescribed turn direction\n        // ('+' is 'left'; '-' is 'right')\n        turnDirection = c;\n        // Then, the direction should be reversed some of the time\n        if (Math.random() < currentRule.wrongTurnChance) {\n          if (turnDirection === '+') turnDirection = '-';\n          else turnDirection = '+';\n        }\n        \n        if (turnDirection === '+') {\n          currentAngle += turnAngle;\n        } else {\n          currentAngle -= turnAngle;\n        }\n        \n      } else if (c === '[') {\n        // Push current value of X,Y from locations\n        const currPos = {X: currentX, Y: currentY, A: currentAngle};\n        locations = locations.push(currPos);\n      } else if (c === ']') {\n        // Reset current value of X,Y to that popped from locations\n        const oldPos = locations.first();\n        locations = locations.pop();\n        currentX = oldPos.X;\n        currentY = oldPos.Y;\n        currentAngle = oldPos.A;\n      } else if (c === 'X' || c === 'Y') {\n        // For completeness; no-op\n      }\n    }\n    return turtleLines;\n  }\n  \n  \n  /*\n    Utility method for sleeping (ugh javascript)\n  */\n  sleep = (milliseconds) => {\n    return new Promise(resolve => setTimeout(resolve, milliseconds))\n  }\n  \n  /*\n    Function that will gradually show each of the sets of lines (the\n    svg objects) such that the system appears to \"grow\"\n  */\n  async grow() {\n    const turtleLines = this.state.turtleLines;\n    \n    this.setState(prevState => {\n        return {\n          needsToGrow: false,\n          inGrowth: true,\n        };\n    });\n    \n    for (var i = 0; i < turtleLines.size; i++) {  \n      \n      if (i !== 0) {\n        turtleLines.get(i-1).visibility = \"hidden drawing\";\n      }\n      turtleLines.get(i).visibility = \"drawing\";\n      this.setState(prevState => {\n        return {\n          turtleLines: turtleLines,\n        };\n      }); \n      await this.sleep(250);\n    }\n    \n  }\n  \n\n  // ----------- OVERRIDING COMPONENT METHODS BELOW HERE ----------------\n  \n  // Before it first loads, run the\n  // turtle to draw the needed lines.\n  // (This method is deprecated, but it's what we need -- \n  // sorry, React developers)\n  UNSAFE_componentWillMount() {\n    this.drawLSystem();\n    \n  }\n  \n  // And, after everything is drawn and\n  // loaded, \"grow\" the system\n  componentDidMount() {\n    this.grow();\n  }\n  \n  \n  // We only want to actually update the component under three conditions:\n  // 1) If the rule has changed\n  // 2) If we need to \"grow\" the system\n  // 3) If we're actually in the process of growing the system\n  shouldComponentUpdate(nextProps, nextState) {\n    return nextProps.rule !== this.props.rule || this.state.needsToGrow || this.state.inGrowth;\n  }\n  \n  \n  // Every time an update happens, check to see if \n  // our parent has changed our rules and, if so, recreate\n  // the lines\n  componentDidUpdate(previousProps, previousState) {\n\n    // Because componentDidUpdate will get called on\n    // any update of state (including, for instance,\n    // adding a new line), only reset and redraw\n    // if the thing being changed is the rule. (Note\n    // that because we've overridden shouldComponentUpdate we \n    // should never get here in the first place, but we're\n    // being safe.)\n    if (previousProps.rule !== this.props.rule) {\n      // The rule has been changed;\n      // reset our state. \n      this.setState(prevState => {\n        return {\n          turtleInstructions: Immutable.List(),\n          turtleLines: Immutable.List(),\n          needsToGrow: false,\n          inGrowth: false,\n        };\n      }); \n      this.drawLSystem();\n    } else if (this.state.needsToGrow) {\n      // We need to grow! Call the \"grow\"\n      // function.\n      this.grow();\n    }\n  }\n  \n\n  /*\n   The actual render, finally!\n  */\n  render() {\n    const turtleLines = this.state.turtleLines;\n    \n    return (\n      <div>\n      {turtleLines.map((turtle, i) => (\n        <TurtleShape key={i} visibility={turtle.visibility} turtleLines={turtle.lines} />\n      ))}\n    </div>\n    );\n  }\n}\n\nexport default LSystem;\n","import Immutable from 'immutable'\n\n// A dictionary of organisms. Note\n// that these don't have default X and Y\n// values set, so you're probably going to \n// want to do something like this:\n// \n// myOrganism = Object.assign({}, Organisms.get(\"algae\").rules, {startX: '60', startY: '120'}) \nconst Organisms = Immutable.OrderedMap(\n    ).set(\"Sierpinski Triangle\",\n      {\n        rules: {\n          angle: '120',\n          step: '7',\n          axiom: 'F-G-G',\n          replacements: '(F = F-G+F+G-F), (G = GG)',\n          loops: '6',\n          fColor: 'RANDOM',\n          gColor: 'RANDOM',\n          bangColor: 'RANDOM',\n          startX: \"150\",\n          startY: \"500\",\n          gardenStep: '6',\n          gardenLoops: '3',\n          wrongStepChance: '0.00',\n          wrongTurnChance: '0.00',\n          wrongAngleChance: '0.00',\n        }\n      }\n    ).set(\"Koch Curve\",\n      {\n        rules: {\n          angle: '90',\n          step: '6',\n          axiom: '-F',\n          replacements:'(F = F+F-F-F+F)',\n          loops: '4',\n          fColor: 'RANDOM',\n          gColor: 'RANDOM',\n          bangColor: 'RANDOM',\n          startX: \"50\",\n          startY: \"500\",\n          gardenStep: '3',\n          gardenLoops: '3',\n          wrongStepChance: '0.00',\n          wrongTurnChance: '0.00',\n          wrongAngleChance: '0.00',\n        }\n      }\n     ).set(\"Kolam\",\n      {\n        rules: {\n          angle: \"15\",\n          step: \"10\",\n          axiom: \"GGGG\",\n          replacements: \"(G = X+X+X+X+X+X+), (X = [F+F+F+F[---X-Y]+++++F++++++++F-F-F-F]), (Y = [F+F+F+F[---Y]+++++F++++++++F-F-F-F])\",\n          loops: '5',\n          fColor: '#ff944d',\n          gColor: '#00ace6',\n          bangColor: 'RANDOM',\n          startX: \"300\",\n          startY: \"300\",\n          gardenStep: '5',\n          gardenLoops: '2',\n          wrongStepChance: '0.00',\n          wrongTurnChance: '0.00',\n          wrongAngleChance: '0.00',\n        }\n      }\n    ).set(\"Dragon Curve\",\n      {\n        rules: {\n          angle: '90',\n          step: '4',\n          axiom: 'FX',\n          replacements: '(X = X+YG+), (Y = -FX-Y), (G = F)',\n          loops: '12',\n          fColor: '#ac3939',\n          gColor: '#e60000',\n          bangColor: 'RANDOM',\n          startX: \"300\",\n          startY: \"300\",\n          gardenStep: '3',\n          gardenLoops: '6',\n          wrongStepChance: '0.00',\n          wrongTurnChance: '0.00',\n          wrongAngleChance: '0.00',\n        }\n      }\n    ).set(\"Anklets of Krishna\",\n      {\n        rules: {\n          angle: '90',\n          step: '4',\n          axiom: 'F+XF+F+XF',\n          replacements: '(X = XF-F-F+XF+F+XF-F-F+X)',\n          loops: '5',\n          fColor: 'RANDOM',\n          gColor: 'RANDOM',\n          bangColor: 'RANDOM',\n          startX: \"400\",\n          startY: \"400\",\n          gardenStep: '3',\n          gardenLoops: '3',\n          wrongStepChance: '0.00',\n          wrongTurnChance: '0.00',\n          wrongAngleChance: '0.00',\n        }\n      }\n    ).set(\"Gosper Curve\",\n      {\n        rules: {\n          angle: '60',\n          step: '9',\n          axiom: 'F',\n          replacements: '(F = F+G++G-F--FF-G+), (G = -F+GG++G+F--F-G)',\n          loops: '4',\n          fColor: '#996600',\n          gColor: '#ffaa80',\n          bangColor: '#996600',\n          startX: \"550\",\n          startY: \"250\",\n          gardenStep: '3',\n          gardenLoops: '3',\n          wrongStepChance: '0.00',\n          wrongTurnChance: '0.00',\n          wrongAngleChance: '0.00',\n        }\n      }\n      \n    ).set(\"Binary Tree\",\n      {\n        rules: {\n          angle: '25',\n          step: '4',\n          axiom: 'F',\n          replacements: '(G = GG), (F = G[+F]-F)',\n          loops: '7',\n          fColor: '#ff3399',\n          gColor: '#336600',\n          bangColor: '#336600',\n          startX: \"300\",\n          startY: \"600\",\n          gardenStep: '2',\n          gardenLoops: '5',\n          wrongStepChance: '0.25',\n          wrongTurnChance: '0.00',\n          wrongAngleChance: '0.25',\n        }\n      }\n    ).set(\"Dandelion\",\n      {\n        rules: {\n          angle: '60',\n          step: '12',\n          axiom: '!X!!FF',\n          replacements: '(F = F[-F][+F][F]), (X = [+G[-G[+G]][-G[+G]]!]Y[-G[+G]!]), (Y = GGG)',\n          loops: '5',\n          fColor: '#e6e600',\n          gColor: '#004d00',\n          bangColor: '#004d00',\n          startX: \"300\",\n          startY: \"600\",\n          gardenStep: '3',\n          gardenLoops: '4',\n          wrongStepChance: '0.00',\n          wrongTurnChance: '0.10',\n          wrongAngleChance: '0.05',\n        }\n      }\n    ).set(\"Feather Tree\",\n      {\n        rules: {\n          angle: '25',\n          step: '10',\n          axiom: '!!FF',\n          replacements: '(F = F[-F][+F[+F]]![+F][-F[-F]])',\n          loops: '4',\n          fColor: 'RANDOM',\n          gColor: 'RANDOM',\n          bangColor: '#008000',\n          startX: \"300\",\n          startY: \"600\",\n          gardenStep: '3',\n          gardenLoops: '3',\n          wrongStepChance: '0.30',\n          wrongTurnChance: '0.05',\n          wrongAngleChance: '0.00',\n        }\n      }\n    ).set(\"Algae\",\n      {\n        rules: {\n          angle: '20',\n          step: '15',\n          axiom: 'F',\n          replacements: '(F = F[+F]F[-F]F)',\n          loops: '3',\n          fColor: 'RANDOM',\n          gColor: 'RANDOM',\n          bangColor: 'RANDOM',\n          startX: \"300\",\n          startY: \"600\",\n          gardenStep: '3',\n          gardenLoops: '3',\n          wrongStepChance: '0.00',\n          wrongTurnChance: '0.75',\n          wrongAngleChance: '0.00',\n        }\n      }\n    ).set(\"Berry Bush\",\n      {\n        rules: {\n          angle: '25',\n          step: '4',\n          axiom: 'F',\n          replacements: '(F = G[+F][-F]GF), (G = GG)',\n          loops: '6',\n          fColor: '#bf00ff',\n          gColor: '#336600',\n          bangColor: '#009973',\n          startX: \"300\",\n          startY: \"600\",\n          gardenStep: '3',\n          gardenLoops: '4',\n          wrongStepChance: '0.50',\n          wrongTurnChance: '0.00',\n          wrongAngleChance: '0.50',\n        }\n      }\n    ).set(\"Little Bush\",\n      {\n        rules: {\n          angle: '23',\n          step: '20',\n          axiom: 'X',\n          replacements: '(X = F-[[X]+X]+F[-FX]+X)',\n          loops: '5',\n          fColor: 'RANDOM',\n          gColor: 'RANDOM',\n          bangColor: 'RANDOM',\n          startX: \"300\",\n          startY: \"600\",\n          gardenStep: '6',\n          gardenLoops: '4',\n          wrongStepChance: '0.00',\n          wrongTurnChance: '0.00',\n          wrongAngleChance: '0.75',\n        }\n      }\n    ).set(\"Fractal Plant\",\n      {\n        rules: {\n          angle: '25',\n          step: '7',\n          axiom: 'X',\n          replacements: '(X = F+[[X]-X]-F[-GX]+X), (F = FF), (G = GG)',\n          loops: '5',\n          fColor: '#336600',\n          gColor: '#86b300',\n          bangColor: '#336600',\n          startX: \"300\",\n          startY: \"600\",\n          gardenStep: '2',\n          gardenLoops: '4',\n          wrongStepChance: '0.25',\n          wrongTurnChance: '0.00',\n          wrongAngleChance: '0.25',\n        }\n      }\n    ).set(\"Thorny Bush\",\n      {\n        rules: {\n          angle: '6',\n          step: '25',\n          axiom: 'F',\n          replacements: '(F = ![-----F][+++++++F]+![----F][+++++++F]+![---F][+++++F]+!F)',\n          loops: '3',\n          fColor: '#99e6ff',\n          gColor: 'RANDOM',\n          bangColor: 'RANDOM',\n          startX: \"400\",\n          startY: \"600\",\n          gardenStep: '4',\n          gardenLoops: '3',\n          wrongStepChance: '0.00',\n          wrongTurnChance: '0.05',\n          wrongAngleChance: '0.15',\n          \n        }\n      }\n    ).set(\"Bushy Tree\",\n      {\n        rules: {\n          angle: '15',\n          step: '9',\n          axiom: '!F',\n          replacements:'(F = FF-[-F+F+F]+[+F-G-G]), (G = F)',\n          loops: '4',\n          fColor: '#996600',\n          gColor: '#ffaa80',\n          bangColor: '#996600',\n          startX: \"300\",\n          startY: \"600\",\n          gardenStep: '3',\n          gardenLoops: '3',\n          wrongStepChance: '0.05',\n          wrongTurnChance: '0.00',\n          wrongAngleChance: '0.10',\n        }\n      }\n    ).set(\"Thistle\",\n      {\n        rules: {\n          angle: '20',\n          step: '8',\n          axiom: '!!GF',\n          replacements:'(F = GGG-[-F+F+F]+[+F-F+F])',\n          loops: '4',\n          fColor: '#ff3399',\n          gColor: '#336600',\n          bangColor: '#336600',\n          startX: \"300\",\n          startY: \"600\",\n          gardenStep: '2',\n          gardenLoops: '3',\n          wrongStepChance: '0.10',\n          wrongTurnChance: '0.00',\n          wrongAngleChance: '0.10',\n        }\n      }\n/*\n    ).set(\"Christmas Tree\",\n      {\n        rules: {\n          angle: '18',\n          step: '11',\n          axiom: 'LSLFFF',\n          replacements:'(S = [+++G][---G]TS),(G = +H[-G]L),(H = -G[+H]L), (T = TL), (L = [-F[+F]F][+F[-F]F]F)',\n          loops: '10',\n          fColor: '#004d00',\n          gColor: 'RANDOM',\n          bangColor: 'RANDOM',\n          startX: \"300\",\n          startY: \"600\",\n          gardenStep: '5',\n          gardenLoops: '5',\n          wrongStepChance: '0.50',\n          wrongTurnChance: '0.00',\n          wrongAngleChance: '0.05',\n        }\n      }\n*/\n    );\n     \n\nexport default Organisms;","import React, { Component } from 'react'\nimport Organisms from './Organisms'\n\nclass Form extends Component {\n  constructor(props) {\n    super(props)\n\n    this.initialState = {\n      angle: props.rule.angle,\n      step: props.rule.step,\n      axiom: props.rule.axiom,\n      prevReplacements: \"\",\n      replacements: props.rule.replacements,\n      loops: props.rule.loops,\n      startX: props.rule.startX,\n      startY: props.rule.startY,\n      fColor: props.rule.fColor,\n      gColor: props.rule.gColor,\n      bangColor: props.rule.bangColor,\n      wrongStepChance: props.rule.wrongStepChance,\n      wrongTurnChance: props.rule.wrongTurnChance,\n      wrongAngleChance: props.rule.wrongAngleChance,\n      addGrowSteps: props.rule.addGrowSteps,\n    }\n\n    this.state = this.initialState;\n  }\n  \n  handleChange = event => {\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n    \n    this.setState({\n      [name]: value,\n    })\n  }\n  \n  fillRules = newRule => {\n    this.setState(\n      newRule\n    , () => this.submitForm());\n  }\n  \n  submitForm = () => {\n    // Always force a refresh when submitting the form\n    this.setState({\n      randomNumberForFormSubmittal: Math.random(),\n    }, () => this.props.handleSubmit(this.state, \"false\"));\n  }\n  \n  mutate = () => {\n    // Get the current rules and add/delete a random letter/symbol\n    const replacements = this.state.replacements;\n    const replacementArray = replacements.split(',');\n    const coinFlip = Math.floor(Math.random() * 2);\n    // Which rule do we change (if there are multiples)?\n    const ruleToChange = Math.floor(Math.random() * (replacementArray.length));\n      \n    // What are the valid characters we can add?\n    // Any of the generic ones, plus any of the characters\n    // we have expansion rules for. (Anything we don't have\n    // an expansion rule for would be a no-op.)      \n    var validCharacters = [ \"+\", \"-\", \"!\", \"F\", \"G\" ];\n    \n    // Result of the change\n    var newReplacements = \"\";\n    \n    for (const rule of replacementArray) {\n      const validChar = rule.split('=')[0].replace(/\\(/,\"\").trim().split(\"\");\n      validCharacters = validCharacters.concat(validChar); \n    }\n    \n    // Uninquify the valid characters (just in case)\n    validCharacters = validCharacters.filter((item, pos) => validCharacters.indexOf(item) === pos);\n    \n\n    // Add or delete?\n    if (coinFlip === 0) {\n      // It's an add!\n      // Which character should we add?\n      const charToAdd = validCharacters[Math.floor(Math.random() * (validCharacters.length))]; \n      \n      // Finally, parse the replacements and add this new character somewhere in the appropriate rule\n      for (var i=0; i < replacementArray.length; i++) {\n        if (i === ruleToChange) {\n          const rule = replacementArray[i].split('=');\n          const subst = {findString: rule[0].replace(/\\(/,\"\").trim(), newString: rule[1].replace(/\\)/,\"\").trim()};\n          \n          const posToAdd = Math.floor(Math.random() * (subst.newString.length + 1));\n          console.log(\"Adding '\" + charToAdd + \"' at \" + posToAdd + \" in rule \" + ruleToChange);\n          newReplacements += \"(\" + subst.findString + \" = \" + subst.newString.substr(0, posToAdd) + charToAdd + subst.newString.substr(posToAdd) + \"), \";\n        } else {\n          newReplacements += replacementArray[i] + \", \";\n        }\n      }\n\n    } else {\n      // Delete!\n      // First try deleting from the rule we chose earlier\n      var deletionResult = this.deleteFromRule(replacementArray, ruleToChange, validCharacters);\n      if (! deletionResult.found) {\n        // if there's nothing left in there to delete, delete from any rule\n        for (var ruleIndex=0; ruleIndex < replacementArray.length; ruleIndex++) {\n          deletionResult = this.deleteFromRule(replacementArray, ruleIndex, validCharacters);\n          if (deletionResult.found) break;\n        }\n      }\n      newReplacements = deletionResult.newReplacements;\n    }\n    \n    // newReplacements now has a trailing \", \" because of the way we built up the\n    // string -- get rid of it.\n    newReplacements = newReplacements.slice(0, -2);\n    \n    // Always force a refresh when submitting the form\n    this.setState({\n      prevReplacements: replacements,\n      replacements: newReplacements,\n      addGrowSteps: false,\n      randomNumberForFormSubmittal: Math.random(),\n    }, () => this.props.handleSubmit(this.state, \"false\"));\n  }\n  \n  // Deletes a random character from the specified rule in the array,\n  // if that character is one of the \"valid\" characters\n  deleteFromRule(replacementArray, ruleToChange, validCharacters) {\n    var newReplacements = \"\";\n    for (var j=0; j < replacementArray.length; j++) {\n        \n      if (j === ruleToChange) {\n        const rule = replacementArray[j].split('=');\n        const subst = {findString: rule[0].replace(/\\(/,\"\").trim(), newString: rule[1].replace(/\\)/,\"\").trim()};\n        const posToDelete = Math.floor(Math.random() * (subst.newString.length + 1));\n        var found = false;\n        \n        const result = this.deleteStartingAt(posToDelete, subst, newReplacements, validCharacters, ruleToChange);\n        newReplacements = result.newReplacements;\n        found = result.found;\n        \n        if (! found) {\n          // just delete the first one we find\n          const result = this.deleteStartingAt(0, subst, newReplacements, validCharacters, ruleToChange);\n          newReplacements = result.newReplacements;\n          found = result.found;\n        }\n        \n        if (! found) {\n          // I give up! This almost certainly means we're just out of stuff to delete.\n          newReplacements += replacementArray[j].trim() + \", \";\n        }\n        \n      } else {\n        newReplacements += replacementArray[j].trim() + \", \";\n      }\n    }\n    return {newReplacements: newReplacements, found: found};\n  }\n  \n  // Deletes the character at posToDelete, unless it's not a valid\n  // character, in which case it deletes the next one it finds\n  deleteStartingAt(posToDelete, subst, newReplacements, validCharacters, ruleToChange) {\n    var found = false;\n    for (var k=posToDelete; k < subst.newString.length; k++) {\n      if (validCharacters.indexOf(subst.newString.charAt(k)) > -1) {\n        console.log(\"Deleting '\" + subst.newString.charAt(k) + \"' at \" + k + \" in rule \" + ruleToChange);\n        newReplacements += \"(\" + subst.findString + \" = \" + subst.newString.substr(0, k) + subst.newString.substr(k+1) + \"), \";\n        found = true;\n        break;\n      } \n    }\n    return {newReplacements: newReplacements, found: found};\n  }\n  \n  \n  revert = () => {\n    const prevReplacements = this.state.prevReplacements;\n    const replacements = this.state.replacements;\n    // Always force a refresh when submitting the form\n    this.setState({\n      replacements: prevReplacements,\n      prevReplacements: replacements,\n      addGrowSteps: false,\n      randomNumberForFormSubmittal: Math.random(),\n    }, () => this.props.handleSubmit(this.state, \"false\"));\n  }\n  \n  getLink = () => {\n    const { angle,\n      step,\n      axiom,\n      prevReplacements,\n      replacements,\n      loops,\n      startX,\n      startY,\n      fColor,\n      gColor,\n      bangColor,\n      wrongStepChance,\n      wrongTurnChance,\n      wrongAngleChance,\n      addGrowSteps } = this.state;\n    const link = window.location.origin + \"/reactive-garden/home?\" + \n       \"angle=\" + encodeURIComponent(angle) + \"&\" +\n       \"step=\" + encodeURIComponent(step) + \"&\" +\n       \"axiom=\" + encodeURIComponent(axiom) + \"&\" +\n       \"replacements=\" + encodeURIComponent(replacements) + \"&\" +\n       \"loops=\" + encodeURIComponent(loops) + \"&\" +\n       \"startX=\" + encodeURIComponent(startX) + \"&\" +\n       \"startY=\" + encodeURIComponent(startY) + \"&\" +\n       \"fColor=\" + encodeURIComponent(fColor) + \"&\" +\n       \"gColor=\" + encodeURIComponent(gColor) + \"&\" +\n       \"bangColor=\" + encodeURIComponent(bangColor);\n       \n    console.log(wrongStepChance);\n    console.log(wrongTurnChance);\n    console.log(wrongAngleChance);\n    console.log(addGrowSteps);\n    console.log(prevReplacements);\n    \n    console.log(link);\n        \n    const el = document.createElement('textarea');\n    el.value = link;\n    document.body.appendChild(el);\n    el.select();\n    document.execCommand('copy');\n    document.body.removeChild(el);\n\n  }\n\n  render() {\n    const { angle,\n      step,\n      axiom,\n      prevReplacements,\n      replacements,\n      loops,\n      startX,\n      startY,\n      fColor,\n      gColor,\n      bangColor,\n      wrongStepChance,\n      wrongTurnChance,\n      wrongAngleChance,\n      addGrowSteps } = this.state;\n    const self = this;\n    \n    return (\n      \n    <div>\n    \n      <div className=\"examples\">\n        <h3>Examples</h3>\n        <p>Click on the name to try it out! Rules will be \n        auto-populated in the form to the right.</p>\n        <ul className=\"columns\">\n        \n          {Organisms.toArray().map(function(key, i) {\n            return <li key={i}>\n                   <button onClick={() => self.fillRules({\n                      axiom: key[1]['rules']['axiom'],\n                      prevReplacements: \"\",\n                      replacements: key[1]['rules']['replacements'],\n                      angle: key[1]['rules']['angle'],\n                      step: key[1]['rules']['step'],\n                      loops: key[1]['rules']['loops'],\n                      startX: key[1]['rules']['startX'],\n                      startY: key[1]['rules']['startY'],\n                      fColor: key[1]['rules']['fColor'],\n                      gColor: key[1]['rules']['gColor'],\n                      bangColor: key[1]['rules']['bangColor'],\n                      wrongStepChance: '0.00',\n                      wrongAngleChance: '0.00',\n                      wrongTurnChance: '0.00',\n                      addGrowSteps: true,\n                    })}>\n                  <strong>{key[0]}</strong>\n                  </button>\n                  </li>\n            })} \n        </ul>\n      </div>\n      \n      <div className=\"instructions\">\n        <h3>L-system rules</h3>\n        <form>\n          <label>Axiom (initial string)</label>\n          <input\n            type=\"text\"\n            name=\"axiom\"\n            size=\"10\"\n            value={axiom}\n            onChange={this.handleChange} />\n          \n          <ShowPreviousRules prevRules={prevReplacements} onClick={this.revert} />\n          \n          <br />\n          <label>Replacement Rules</label>\n          <input\n            type=\"text\"\n            name=\"replacements\"\n            size=\"50\"\n            value={replacements}\n            onChange={this.handleChange} />\n          \n          <br />\n          <label>Angle for Turns</label>\n          <input\n            type=\"text\"\n            name=\"angle\"\n            size=\"5\"\n            value={angle}\n            onChange={this.handleChange} />\n          <br />\n          <label>Step Size (length of line)</label>\n          <input\n            type=\"text\"\n            name=\"step\"\n            size=\"5\"\n            value={step}\n            onChange={this.handleChange} />\n          <br />\n          <label>Loops (number of recursions)</label>\n          <input\n            type=\"text\"\n            name=\"loops\"\n            size=\"5\"\n            value={loops}\n            onChange={this.handleChange} />\n          <br />\n          <label>Initial X Position</label>\n          <input\n            type=\"text\"\n            name=\"startX\"\n            size=\"5\"\n            value={startX}\n            onChange={this.handleChange} />\n          <label>Initial Y Position</label>\n          <input\n            type=\"text\"\n            name=\"startY\"\n            size=\"5\"\n            value={startY}\n            onChange={this.handleChange} />\n          <br />\n          <label>'F' Color</label>\n          <input\n            type=\"text\"\n            name=\"fColor\"\n            size=\"8\"\n            value={fColor}\n            onChange={this.handleChange} />\n          <label>'G' Color</label>\n          <input\n            type=\"text\"\n            name=\"gColor\"\n            size=\"8\"\n            value={gColor}\n            onChange={this.handleChange} />\n          <label>'!' Color</label>\n          <input\n            type=\"text\"\n            name=\"bangColor\"\n            size=\"8\"\n            value={bangColor}\n            onChange={this.handleChange} />\n          <br />\n          \n          \n          <label>Draw growth steps</label>\n          <input\n            type=\"checkbox\"\n            name=\"addGrowSteps\"\n            checked={addGrowSteps}\n            onChange={this.handleChange} />\n          \n          <br /><br />\n          <strong>Buy the turtle a drink!</strong>\n          <br />\n          Enter the following probabilities in decimal (e.g. 0.25 == 25% chance)\n          <br />\n          <input\n            type=\"text\"\n            name=\"wrongStepChance\"\n            size=\"8\"\n            value={wrongStepChance}\n            onChange={this.handleChange} />\n          <label>Probability that a step will be somewhat longer or shorter</label>\n          <br />\n          <input\n            type=\"text\"\n            name=\"wrongTurnChance\"\n            size=\"8\"\n            value={wrongTurnChance}\n            onChange={this.handleChange} />\n          <label>Probability of turning in the wrong direction</label>\n          <br />\n          <input\n            type=\"text\"\n            name=\"wrongAngleChance\"\n            size=\"8\"\n            value={wrongAngleChance}\n            onChange={this.handleChange} />\n          <label>Probability that a turn angle will be somewhat narrower or wider</label>\n          <br />\n          <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\n          <input type=\"button\" value=\"Mutate\" onClick={this.mutate} />\n          <input type=\"button\" value=\"Get Link\" onClick={this.getLink} />\n            \n        </form>\n      </div>\n      <div className=\"instructions\">\n        <h3>Instructions</h3>\n        To run an L-system, enter the required information and press \"submit\". Some notes:\n        <ul>\n        <li>The \"Replacement Rule\" should consist one or more comma-separated replacement rules, of the format \"( X = Y )\" -- see examples, below</li>\n        <li>The rules use the following symbols:\n          <ul>\n          <li>'F' and 'G' each draw a single line segment</li>\n          <li>'+' and '-' rotate the turtle to the left and right respectively (by the defined angle)</li>\n          <li>'[' and ']' store and recall a particular XY coordinate for the turtle (i.e. allow the turtle to teleport back to a previous location)</li>\n          <li>'!' will draw a line segment that is larger if it's older, by a factor of how many generations old it is. In other words, \n            a '!' that is added to the output string in the first loop will be 6 times longer than a '!' that's added to the \n            output string in the sixth loop.</li> \n          <li>'X', 'Y', and all other characters are no-ops and are used as placeholders in the rules for more complicated expansions \n            (see \"Christmas Tree\" for an example)</li>\n          </ul>\n        </li>\n        <li>Don't use too many recursions, or the JavaScript will freak out. Limiting to 6 loops is a good rule of thumb.</li>\n        <li>If you're having trouble seeing the entire resulting drawing, try reducing the \"Step Size\" to make it smaller</li>\n        <li>You can also use the \"F Color\", \"G Color\" and \"'!' Color\" fields to set colors for the various letters. If using hex colors,\n          please include the \"#\" at the beginning! (Set these to the string 'random' if you want it to just\n          choose some random colors from the blue-green spectrum for each line.)</li>\n        <li>NOTE: INPUTS ARE NOT CURRENTLY BEING SANITIZED! If you get an error, probably it's a parsing issue. Check your rules in particular.</li>\n        </ul>\n      </div>\n      \n      \n    </div>\n    );\n  }\n}\n\nfunction ShowPreviousRules(params) {\n\n  if (params.prevRules !== \"\") {\n    return (\n    <span>\n      <br />\n      <input className=\"noIndent\" type=\"button\" value=\"Revert to Previous\" onClick={params.onClick} />\n      <input\n        type=\"text\"\n        name=\"prevReplacements\"\n        size=\"50\"\n        value={params.prevRules}\n        disabled={true} />\n      \n    </span>\n    );\n  }\n  return <span />;\n}\n\n\nexport default Form;","import React, { Component } from 'react'\nimport LSystem from './LSystem'\nimport Form from './Form'\nimport Organisms from './Organisms'\nimport queryString from 'query-string'\n\nclass Home extends Component {\n  constructor(props) {\n    super(props)\n  \n    const allOrgs = Organisms.toList();\n    const numOrgs = allOrgs.size;\n    var rules = {};\n    const values = queryString.parse(this.props.location.search)\n      \n    if (typeof values.axiom !== 'undefined') {\n      rules = {\n        angle: values.angle,\n        step: values.step,\n        axiom: values.axiom,\n        replacements: values.replacements,\n        loops: values.loops,\n        startX: values.startX,\n        startY: values.startY,\n        fColor: values.fColor,\n        gColor: values.gColor,\n        bangColor: values.bangColor,\n        addGrowSteps: false,\n      };\n    } else {\n      var randomIndex = Math.floor(Math.random() * Math.floor(numOrgs));\n      rules = allOrgs.get(randomIndex).rules;\n      rules = Object.assign(rules, {addGrowSteps: true});\n    }\n    \n    // On the first draw, always follow the rules\n    this.initialState = {\n      rule: Object.assign({}, rules, {\n          wrongStepChance: '0.00',\n          wrongTurnChance: '0.00',\n          wrongAngleChance: '0.00',}) \n    }\n    this.state = this.initialState;\n  }\n\n  handleSubmit = (newRule) => {\n    this.setState({ rule: newRule });\n  }\n  \n  render() {\n    const { rule } = this.state;\n    \n    return (\n    <div>\n      <div className=\"drawArea\">\n        <LSystem rule={rule} />\n      </div>\n      <Form handleSubmit={this.handleSubmit} rule={rule} />\n    </div>\n    )\n  };\n}\nexport default Home\n","import React, { Component } from 'react'\nimport Immutable from 'immutable'\nimport LSystem from './LSystem'\nimport Organisms from './Organisms'\n\n\nclass Garden extends Component {\n  constructor(props) {\n    super(props)\n\n  \n    this.initialState = {\n      organisms: Immutable.List(),\n    }\n  \n    this.state = this.initialState\n  }\n \n \n  // Before everything loads, grab 25\n  // random plants.\n  // (This method is deprecated, but it's what we need -- \n  // sorry, React developers)\n  UNSAFE_componentWillMount() {\n    this.shuffle(); \n  }\n  \n  /*\n    Utility method for sleeping (ugh javascript)\n  */\n  sleep = (milliseconds) => {\n    return new Promise(resolve => setTimeout(resolve, milliseconds))\n  }\n  \n  /*\n    Kick off some \"waving\" in the breeze...\n  */\n  triggerBreeze = () => {\n    (async () => {\n        console.log('function2');\n        await this.wave(1);\n    })();\n  }\n\n  async wave(iteration) {\n    console.log(iteration);\n    this.forceUpdate();\n    if (iteration < 50) {\n      await this.sleep(250);\n      \n      var newOrganisms = Immutable.List();\n      for (var i=0; i < 25; i++) {\n        var org = this.state.organisms.get(i);\n        newOrganisms = newOrganisms.push(Object.assign({}, org, {\n              wrongStepChance: '0.00',\n              wrongTurnChance: '0.00',\n              wrongAngleChance: '0.05',\n              randomNumber: Math.random(),\n          }));\n      }\n      this.setState({\n        organisms: newOrganisms,\n      }, () => this.wave(++iteration));\n    }\n    \n  }\n  \n  shuffle = () => {\n    // The first 6 \"\"organisms\" are too non-plantlike to use in a garden\n    const allOrgs = Immutable.List(Organisms).slice(6); \n    const numOrgs = allOrgs.size;\n    \n    var newOrganisms = Immutable.List();\n        \n    /*\n    The drawArea is 600x600, and we're dividing it into\n    25 squares.\n    */\n    \n    for (var x = 0; x <= 4; x++) {\n      for (var y = 0; y <= 4; y++) {\n        var randomIndex = Math.floor(Math.random() * Math.floor(numOrgs));\n        \n        var rules = allOrgs.get(randomIndex)[1].rules;\n        \n        // Each organism has its own starting point that\n        // will center it a garden bit; this is relative to\n        // a 600x600 grid for the main screen, so we need to\n        // scale it down for this smaller \"garden plot\"\n        var startX = (rules['startX'] / 600) * 120;\n        var startY = (rules['startY'] / 600) * 120;\n        \n        newOrganisms = newOrganisms.push(Object.assign({}, rules, {\n            startX: startX, \n            startY: startY,\n            step: rules['gardenStep'], \n            loops: rules['gardenLoops'],\n            name: allOrgs.get(randomIndex)[0],\n        }));\n      }\n    }\n    this.setState({\n      organisms: newOrganisms,\n    });\n  }\n  \n  \n  render() {\n    const organisms = this.state.organisms;\n    \n    return (\n    <div>\n      <div className=\"drawArea\">\n      {organisms.map((rule, i) => (\n        <div key={i} className=\"gardenPlot\">\n          <LSystem key={i} rule={rule} />\n          <div className=\"footnote\">{i+1}</div>\n        </div>\n      ))}\n      </div>\n      \n      <div className=\"instructions\">\n      <ol className=\"columns\">\n      {organisms.map((rule, i) => (\n        <li key={i}>{rule.name}</li>\n      ))}\n      </ol>\n      <div className=\"button\">\n        <button onClick={this.shuffle}>Shuffle</button>\n        <button onClick={this.triggerBreeze}>Breeze</button>\n      </div>\n      \n      </div>\n      \n    </div>\n    )\n    \n  }\n}\nexport default Garden\n","import React, { Component } from 'react'\nimport ReactDOM from 'react-dom'\n\nclass Intro extends Component {\n  constructor(props) {\n    super(props)\n    \n    // On the first draw, always follow the rules\n    this.initialState = {\n      page: 1,\n    }\n    \n    this.state = this.initialState;\n  }\n\n  // I don't even care about how you're supposed\n  // to do it anymore. React is making me crazy.\n  showAnswer = (event) => {\n    var element = document.getElementById('answer');\n    ReactDOM.findDOMNode(element).style.display = 'block';\n  }\n  \n  turnPage = (event) => {\n    var otherPages = document.querySelectorAll('div.slide');\n    otherPages.forEach(item => this.refs[item.id].className = 'hidden' );  \n    var selectedPage = this.refs[event.target.value];\n    selectedPage.className='selected slide';\n  }\n  \n  render() {\n    return (\n    <div>\n      <div className=\"selected slide\" id=\"1\" ref=\"1\">\n        <div className=\"pagination\">\n          <button onClick={this.turnPage} ref=\"page1button1\" value=\"1\" className=\"selected\">1</button>\n          <button onClick={this.turnPage} ref=\"page1button2\" value=\"2\">2</button>\n          <button onClick={this.turnPage} ref=\"page1button3\" value=\"3\">3</button>\n          <button onClick={this.turnPage} ref=\"page1button4\" value=\"4\">4</button>\n          <button onClick={this.turnPage} ref=\"page1button5\" value=\"5\">5</button>\n        </div>\n\n        <h2>What is an L-system?</h2>\n        \n        <p>\n        An L-system is a parallel rewriting system, and a type of formal grammar.\n        In short, it's a way of describing ... well, all sorts of stuff.<sup>1</sup>\n        </p>\n        <p>\n        According to <a href=\"https://en.wikipedia.org/wiki/L-system\" target=\"_new\">Wikipedia</a>:\n        <br />\n        <em>\"An L-system consists of an alphabet of symbols that can be used to make strings, \n        a collection of production rules that expand each symbol into some larger string of symbols, \n        an initial 'axiom' string from which to begin construction, \n        and a mechanism for translating the generated strings into geometric structures.\"</em>\n        </p>\n        <p> \n        You can think of it kind of like a computer programming language. In particular, it does a\n        lot of stuff with replacements and recursion.\n        </p>\n        <p>\n        L-systems were developed in 1968 by Aristid Lindenmayer, \n        a Hungarian theoretical biologist and botanist at the University of Utrecht.\n        He used L-systems to describe the behaviour of plant cells and to \n        model the growth processes of plant development. \n        </p>\n        <p>\n        Yeah, that's right, a botanist invented a programming language\n        so that he could describe algae.\n        </p>\n        \n        <div className=\"footnote\">\n        [1] <em><a href=\"https://www.sciencedirect.com/science/article/pii/S0022519369800305\" target=\"_new\">Computing ability of a developmental model for filamentous organisms</a></em> \n        </div>\n        <p>\n        &nbsp;\n        </p>\n      </div>\n      \n      <div className=\"slide hidden\" id=\"2\" ref=\"2\">\n        <div className=\"pagination\">\n          <button onClick={this.turnPage} ref=\"page2button1\" value=\"1\">1</button>\n          <button onClick={this.turnPage} ref=\"page2button2\" value=\"2\" className=\"selected\">2</button>\n          <button onClick={this.turnPage} ref=\"page2button3\" value=\"3\">3</button>\n          <button onClick={this.turnPage} ref=\"page2button4\" value=\"4\">4</button>\n          <button onClick={this.turnPage} ref=\"page2button5\" value=\"5\">5</button>\n        </div>\n\n        <h2>How Does it Work?</h2>\n        <p>\n        Evaluating an L-system consists of two main steps:\n        </p>\n        <ol>\n          <li>Compute a string that contains a set of instructions</li>\n          <li>Use a \"turtle\" to draw a shape by following the instructions</li>\n        </ol>\n        <h5>Example</h5>\n        <p>\n        Let's start with a vocabulary. L-system vocabularies can get\n        complicated, and different implementations use different symbols,\n        but these two symbols are pretty standard:\n        </p>\n          <ul>\n            <li>'F' means \"Draw a line segment\"</li>\n            <li>'+' means \"Turn\" (you get to choose the angle)</li> \n          </ul>        \n        \n        <p>\n        When we go to draw the L-system, we use a list of these symbols\n        and interpret them as instructions for drawing. For instance, the instructions \n        \"F+F\" mean \"draw a line segment, turn, and draw another line segment.\" \n        </p>\n      </div>\n      \n      <div className=\"slide hidden\" id=\"3\" ref=\"3\">\n        <div className=\"pagination\">\n          <button onClick={this.turnPage} ref=\"page3button1\" value=\"1\">1</button>\n          <button onClick={this.turnPage} ref=\"page3button2\" value=\"2\">2</button>\n          <button onClick={this.turnPage} ref=\"page3button3\" value=\"3\" className=\"selected\">3</button>\n          <button onClick={this.turnPage} ref=\"page3button4\" value=\"4\">4</button>\n          <button onClick={this.turnPage} ref=\"page3button5\" value=\"5\">5</button>\n        </div>\n        <h2>How Does it Work? (cont.)</h2>\n        <p>\n        Now you need a starting string (\"axiom\"). If you wanted you could just start with something\n        like \"F+F+F+F+\" right out of the gate and call it a day. (Or call it a square, if\n        you went with a 90 degree angle. Heh.) But that's boring.\n        </p>\n        <p>\n        The thing that makes L-systems interesting is their use of replacement rules. \n        So, for instance, you could say something like this:\n        </p>\n          <ul>\n            <li>Axiom: F</li>\n            <li>Replacement rule: F = F+F</li>\n            <li>Number of loops: 3</li>\n          </ul>\n        <p> \n        And when you evaluate it, you get this!\n        </p>\n          <ol className=\"zero_indexed\">\n            <li>F</li>\n            <li>F+F</li>\n            <li>F+F + F+F</li>\n            <li>F+F + F+F  +  F+F + F+F</li>\n          </ol>\n        \n      </div>\n      \n      <div className=\"slide hidden\" id=\"4\" ref=\"4\">\n        <div className=\"pagination\">\n          <button onClick={this.turnPage} ref=\"page4button1\" value=\"1\">1</button>\n          <button onClick={this.turnPage} ref=\"page4button2\" value=\"2\">2</button>\n          <button onClick={this.turnPage} ref=\"page4button3\" value=\"3\">3</button>\n          <button onClick={this.turnPage} ref=\"page4button4\" value=\"4\" className=\"selected\">4</button>\n          <button onClick={this.turnPage} ref=\"page4button5\" value=\"5\">5</button>\n        </div>\n\n        <h2>How Does it Work? (cont.)</h2>\n        <p>\n        We just evaluated our first L-system! We started with this:\n        </p>\n          <ul>\n            <li>Axiom: F</li>\n            <li>Replacement Rules: F=F+F</li>\n          </ul>\n        <p>\n        And after 3 loops, we ended up with \"F+F+F+F+F+F+F+F\". (Just\n        think of all of the Fs you could get using more loops.)\n        </p>\n        \n        <h5>Drawing</h5>\n        <p>\n        Okay, so in order to draw a shape for this L-system, there are a \n        couple additional parameters we need to specify:\n        </p>\n          <ul>\n            <li>Angle for turns (e.g. 45°)</li>\n            <li>Size for each line (e.g. 30px)</li> \n          </ul>        \n        \n        <p>\n        And once you've defined those, you just need to find a compliant turtle. <br /> \n        <img src=\"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/google/223/turtle_1f422.png\"\n        alt=\"Turtle\" width=\"50\" /><br />\n        Tell your turtle servant to follow the instructions in your string. Again, \"F\" means draw a line segment (using\n        the length that you specified earlier), and \"+\" means turn (let's say left) by the angle\n        you specified.\n        </p>\n      </div>\n      \n      <div className=\"slide hidden\" id=\"5\" ref=\"5\">\n        <div className=\"pagination\">\n          <button onClick={this.turnPage} ref=\"page5button1\" value=\"1\">1</button>\n          <button onClick={this.turnPage} ref=\"page5button2\" value=\"2\">2</button>\n          <button onClick={this.turnPage} ref=\"page5button3\" value=\"3\">3</button>\n          <button onClick={this.turnPage} ref=\"page5button4\" value=\"4\">4</button>\n          <button onClick={this.turnPage} ref=\"page5button5\" value=\"5\" className=\"selected\">5</button>\n        </div>\n\n        <h2>Quiz Time!</h2>\n        <p>\n        Here are the rules:\n        </p>\n          <ul>\n            <li>Axiom: F</li>\n            <li>Replacement rule: F = F+F</li>\n            <li>Number of loops: 3</li>\n            <li>Step size: 30</li>\n            <li>Angle: 45</li>\n          </ul>\n        \n        <p>\n        And the answer is...\n        </p>\n        <div>\n          <button onClick={this.showAnswer}>Show Answer</button>\n          <img className=\"hidden\" id=\"answer\" alt=\"octagon\" src=\"octagon.png\" />  \n        </div>\n      </div>\n      \n    </div>\n    )\n  };\n}\nexport default Intro\n","import React, { Component } from 'react'\n\nclass Outro extends Component {\n  \n  render() {\n    return (\n    <div>\n      <div className=\"selected slide\" id=\"1\" ref=\"1\">\n        \n        <h2>What else?</h2>\n        \n        <p>\n        <a href=\"https://en.wikipedia.org/wiki/File:Fractal_tree_(Plate_b_-_2).jpg\" target=\"_new\"><img src=\"https://upload.wikimedia.org/wikipedia/commons/4/41/Fractal_tree_%28Plate_b_-_2%29.jpg\" alt=\"3D L-system tree from Wikipedia\" /></a>\n        </p>\n        \n        \n        \n        <p>\n        There are plenty of additional things that could be done with this application,\n        and with L-systems in general. They include (but are not limited to):\n        </p>\n        \n        <h5>3D L-systems</h5>\n        <p>\n        L-systems can be used for describing 3-dimensional systems and making 3D\n        drawings. (This is the number one thing I would love to extend this application to do.)\n        Check out the following sites for some cool examples of 3D L-systems:\n        </p>\n        <ul>\n        <li><a href=\"http://laurenslapre.nl/lapre_004.htm\" target=\"_new\">Lparser</a>, a software package for 3D L-systems</li>\n        <li><a href=\"https://commons.wikimedia.org/wiki/File:Dragon_trees.jpg\" target=\"_new\">These pictures</a> from Wikipedia</li>\n        <li><a href=\"https://www.sidefx.com/docs/houdini/nodes/sop/lsystem.html\" target=\"_new\">L-systems in Houdini</a></li>\n        </ul>\n        \n        \n        <h5>Variations of L-systems</h5>\n        <p>\n        Lindenmayer's original description of L-systems includes a whole lot of stuff that I didn't have time to\n        implement (including a 3D vocabulary). These include parametric L-systems (where functions and parameters can be used \n        in addition to simple rewriting), stochastic L-systems (a more formal vocabulary for randomization), and others.\n        These inclusions make L-system grammars Turing complete and enable description of pretty much everything. Check\n        out the following papers:\n        </p> \n        <ul>\n        <li><a href=\"http://algorithmicbotany.org/papers/abop/abop.pdf\" target=\"_new\">The Algorithmic Beauty of Plants</a></li>\n        <li><a href=\"http://algorithmicbotany.org/papers/lsfp.pdf\" target=\"_new\">Lindenmayer Systems, Fractals, and Plants</a></li>\n        </ul>\n        \n        \n        <h5>Further Reading</h5>\n        <p>\n        This presentation only scratched the surface of what's possible. Here are some good sites to visit to learn more:\n        </p> \n        <ul>\n        <li><a href=\"http://algorithmicbotany.org/\" target=\"_new\">The University of Calgary's Algorithmic Botany Department</a></li>\n        <li><a href=\"https://www.frontiersin.org/articles/10.3389/fpls.2012.00076/full\" target=\"_new\">L-Py: an L-system simulation framework for modeling plant architecture development based on a dynamic language</a></li>\n        <li><a href=\"https://www.reddit.com/r/proceduralgeneration/\" target=\"_new\">The \"Procedural Generation\" subreddit</a></li>\n        </ul>\n        \n      </div>\n    </div>\n    )\n  };\n}\nexport default Outro\n","import React, { Component } from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\"\nimport Home from './Home'\nimport Garden from './Garden'\nimport Intro from './Intro'\nimport Outro from './Outro'\n\nclass App extends Component {\n  \n  render() {\n    \n    return (\n    <Router basename='/reactive-garden/'>\n    <p>Welcome to my garden! This is a friendly place for happy L-system plants to grow and flourish. \n    &nbsp; <Link to=\"/intro\">Intro</Link> | <Link to=\"/\">Home</Link> | <Link to=\"/garden\">Garden</Link> | <Link to=\"/outro\">Outro</Link></p>\n    \n            \n        <Switch>\n          <Route path=\"/intro\" component={Intro} />\n          <Route path=\"/garden\" component={Garden} />\n          <Route path=\"/outro\" component={Outro} />\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/home\" component={Home} />\n\n        </Switch>\n      \n    </Router>\n    );\n  }\n}\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}