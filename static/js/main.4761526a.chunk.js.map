{"version":3,"sources":["TurtleLine.js","TurtleShape.js","LSystem.js","Form.js","Home.js","Organisms.js","Garden.js","App.js","index.js"],"names":["TurtleLine","this","props","line","color","pathData","map","p","get","join","className","stroke","d","Component","TurtleShape","turtleLines","visibility","lines","index","key","LSystem","sleep","milliseconds","Promise","resolve","setTimeout","state","turtleInstructions","Immutable","List","needsToGrow","currentRule","rule","instructions","axiom","addGrowSteps","replacements","grow","toLowerCase","split","subst","findString","replace","trim","newString","push","turtleString","expandInstructions","i","loops","runTurtle","setState","prevState","inputString","generation","debug","outputString","console","log","token","matched","replacement","angle","Math","PI","item","colorful","currentAngle","currentX","Number","startX","currentY","startY","locations","Stack","step","colorSeed","newColor","length","c","charAt","String","padStart","floor","random","point1","Map","x","y","cos","toRadians","sin","point2","n","currPos","X","Y","A","oldPos","first","pop","inGrowth","size","drawLSystem","nextProps","nextState","previousProps","previousState","turtle","Form","handleChange","event","target","name","value","submitForm","handleSubmit","initialState","type","onChange","onClick","Home","newRule","Organisms","set","resources","nitrogen","oxygen","carbonDioxide","rules","Garden","organisms","Object","assign","App","to","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4761526a.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass TurtleLine extends Component {  \n  render() {\n    const { line, color } = this.props;\n    \n    const pathData = \"M \" + line\n      .map(p => p.get('x') + ' ' + p.get('y'))\n      .join(\" L \");\n\n    return <path className='path' stroke={color} d={pathData} />;\n    \n  }\n}\n\nexport default TurtleLine;\n","import React, { Component } from 'react'\nimport TurtleLine from './TurtleLine'\n\nclass TurtleShape extends Component {  \n  \n  render() {\n    const turtleLines = this.props.turtleLines;\n    const visibility = this.props.visibility;\n    return (\n      <div>\n      <svg className={visibility}>\n        {turtleLines.map((lines, index) => (\n          <TurtleLine key={index} line={lines.get(\"line\")} color={lines.get(\"color\")} />\n        ))}\n      </svg>\n      </div>\n    );\n    \n  }\n}\n\nexport default TurtleShape;\n","import React, { Component } from 'react'\nimport Immutable from 'immutable'\nimport TurtleShape from './TurtleShape'\n\nclass LSystem extends Component {\n  constructor(props) {\n    /*\n      The propery handed in should be an object called \"rule\", with\n      the following keys:\n        axiom: The initial string\n        numloops: How many times to run the replacement algorithm\n        replacements: One or more comma-separated replacement rules, of the format \"X = Y\" \n        step: How many pixels to draw each line\n        angle: The angle to turn when turning\n        startX: The X position at which to start drawing\n        startY: The Y position at which to start drawing\n        grow: Boolean saying whether to draw the growing process or jump straight to the final design\n    */\n    super(props);\n    \n    /*\n      In this component's state, we'll keep track of the following:\n        turtleInstructions: A list of the expanded instructions (one entry for\n            each loop through the rewriting process)\n        turtleLines: A list of structures which contain the following:\n            visibility: The class names for the wrapping svg object \n            lines: A list of the actual TurtleLine components that will get rendered --\n                  these are (somewhat confusingly) a Map with keys \"line\" (X/Y coordinates as a List)\n                  and \"color\" (a color for that particular line)\n        needsToGrow: For complicated React reasons, a boolean indicating whether or not\n            we've gone through the \"growing\" render process for this particular L-System\n    */\n    this.state = {\n      turtleInstructions: Immutable.List(),\n      turtleLines: Immutable.List(),\n      needsToGrow: false,\n    }\n\n  }\n  \n  /*\n    The main function that will generate the turtle drawing instructions\n    for each iteration, and populate this.state accordingly.\n  */\n  drawLSystem() {\n    const currentRule = this.props.rule;  // The information about how to build the system\n    var instructions = currentRule.axiom; // The starting point\n    var addGrowSteps = true; // Whether or not to add all of the \"steps\" to show \"growth\"\n    var replacements = []; // The actual replacement rules to perform (a list of objects  \n                           // with \"findString\" and \"newString\" keys)\n                           \n    if ('grow' in this.props) addGrowSteps = \n      (this.props.grow.toLowerCase() === 'true'); // Whether or not to draw the \"growth\" of the organism\n      \n    const debug = false; // Will output to console.log with replacement string information\n    \n    // Parse the replacement instructions\n        \n    for(const replacement of currentRule.replacements.split(',')) {\n      const rule = replacement.split('=');\n      const subst = {findString: rule[0].replace(/\\(/,\"\").trim(), newString: rule[1].replace(/\\)/,\"\").trim()};\n      replacements.push(subst);\n    }\n    \n    // Loop N times, and for each loop, expand the instructions\n    // and create the relevant TurtleLines\n    for (var i = 0; i < currentRule.loops; i++) {\n      const turtleString = this.expandInstructions(instructions, replacements, i, debug);\n      \n      // If we're supposed to add each of the growth \"steps\"\n      // (or if this is the last step), add it to the state\n      var add = (addGrowSteps || i === currentRule.loops - 1);\n      if (add) {\n        const turtleLines = this.runTurtle(turtleString);\n        // Add this loop's instructions and TurtleLines to our state\n        this.setState(prevState => {\n          return {\n            turtleInstructions: prevState.turtleInstructions.push(turtleString),\n            turtleLines: prevState.turtleLines.push(turtleLines),\n          };\n        });\n      }; \n      \n      // Reset the instructions to the current turtle string in preparation for the next loop\n      instructions = turtleString;\n    }\n    \n    // After we're done updating state with all of the appropriate turtle lines,\n    // indicate to ourselves that we need to grow. (i.e. to show the actual rendering of the lines)\n    this.setState(prevState => {\n        return {\n          needsToGrow: true,\n        };\n    });\n  }\n  \n  \n  /* \n    Expansion function for a given \"loop\" of instruction generation\n  */\n  expandInstructions(inputString, replacements, generation, debug) {\n    \n    var outputString = '';\n    \n    if (debug) {\n      console.log(\"----------------\");\n      console.log(\" Generation \" + generation);\n      console.log(\"Starting with: \" + inputString);\n    }\n    \n    for(const token of inputString) {\n      var matched = false;\n      \n      if (token === '!') {\n        // If an exclamation point is in the input string, it needs\n        // to get \"older\" -- its age is tracked by having a bunch of\n        // '*' symbols after it (one '|' for each generation older than one)\n        outputString += \"!*\";\n        // any other \"*\"s after it will just be passed through as normal\n        if (debug) console.log(\"Replacing ! with !*\");\n        \n      } else {\n        \n        for(const replacement of replacements) {\n          if (replacement.findString === token) {\n            matched = true;\n            outputString += replacement.newString;\n            if (debug) console.log(\"Replacing \" + replacement.findString + \" with \" + replacement.newString);\n            break;\n          }  \n        }\n        if (! matched) {\n          if (debug) console.log(\"Adding \" + token + \" as is\")\n          outputString += token; \n        }\n      }\n    }\n    \n    if (debug) {\n      console.log(\"Final expansion: \");\n      console.log(outputString);\n    }\n    \n    return outputString;\n  }\n  \n  \n  /*\n    Utility function for converting to radians to make the math easier\n  */\n  toRadians(angle) {\n    return angle * (Math.PI / 180);\n  }\n  \n  /*\n    Function to send the turtle along the path of following a particular\n    instruction set and drawing out the lines necessary for it; note that\n    these lines are hidden to begin with, and need to go through the \"grow\"\n    process in order to be visible\n  */\n  runTurtle(item) {\n\n    const instructions = item;\n    const currentRule = this.props.rule;\n    const colorful = ('colorful' in this.props && this.props.colorful.toLowerCase() === 'true');\n    \n    var currentAngle = 90;\n    var currentX = Number(currentRule.startX);\n    var currentY = Number(currentRule.startY);\n    var locations = Immutable.Stack();\n    \n    // This structure is what we'll ultimately add to this.state.turtleLines;\n    // note that it's hidden by default\n    var turtleLines = {\n      visibility: \"hidden drawArea\",\n      lines: Immutable.List(),\n    };\n    \n    const angle = Number(currentRule.angle);\n    const step = Number(currentRule.step);\n    \n    var colorSeed = 1;\n    var newColor = \"#000000\";\n    \n    // For each character in the string\n    for (var i = 0; i < instructions.length; i++) {\n      const c = instructions.charAt(i);\n      \n      // If we want this to be 'colorful' then just for variety, \n      // let's add a random color (in the blue/green\n      // colorspace) to each line we draw.\n      // TODO: Make this ombre as it recurses or something clever like that\n      if (colorful) {\n        newColor = \"#00\" + String(colorSeed).padStart(4, '0');\n        colorSeed = Math.floor(Math.random() * Math.floor(9999));\n      }\n      \n      if (c === 'F' || c === 'G') {\n        // If it's an \"F\" or a \"G\", add a line and move the turtle\n        const point1 = new Immutable.Map({x: currentX, y: currentY,});\n        currentX = currentX + step * Math.cos(this.toRadians(currentAngle));\n        currentY = currentY - step * Math.sin(this.toRadians(currentAngle));\n        const point2 = new Immutable.Map({x: currentX, y: currentY,});\n        \n        turtleLines.lines = turtleLines.lines.push(Immutable.Map({\n          line: Immutable.List([point1, point2]), \n          color: newColor,\n        }));\n        \n      } else if (c === '!') {\n        // If it's an exclamation point, we need to find out how big it's\n        // supposed to be depending on how many \"*\"s come after it\n        var n = 1;\n        while (i + n < instructions.length && instructions.charAt(i + n) === '*') {\n          n += 1;\n        }\n        // And skootch forward to the end of the \"*\"s (less one, because the\n        // loop will add one to us regardless)\n        i = i + n - 1;\n        \n        // And finally, add a line of the appropriate size\n        const point1 = new Immutable.Map({x: currentX, y: currentY,});\n        currentX = currentX + step * n * Math.cos(this.toRadians(currentAngle));\n        currentY = currentY - step * n * Math.sin(this.toRadians(currentAngle));\n        const point2 = new Immutable.Map({x: currentX, y: currentY,});\n        \n        turtleLines.lines = turtleLines.lines.push(Immutable.Map({\n          line: Immutable.List([point1, point2]), \n          color: newColor,\n        }));\n        \n      } else if (c === '+') {\n        // If it's a turn, change the angle\n        currentAngle += angle; // turn left\n      } else if (c === '-') {\n        currentAngle -= angle; // turn right)\n      } else if (c === '[') {\n        // Push current value of X,Y from locations\n        const currPos = {X: currentX, Y: currentY, A: currentAngle};\n        locations = locations.push(currPos);\n      } else if (c === ']') {\n        // Reset current value of X,Y to that popped from locations\n        const oldPos = locations.first();\n        locations = locations.pop();\n        currentX = oldPos.X;\n        currentY = oldPos.Y;\n        currentAngle = oldPos.A;\n      } else if (c === 'X' || c === 'Y') {\n        // For completeness; no-op\n      }\n    }\n    return turtleLines;\n  }\n  \n  \n  /*\n    Utility method for sleeping (ugh javascript)\n  */\n  sleep = (milliseconds) => {\n    return new Promise(resolve => setTimeout(resolve, milliseconds))\n  }\n  \n  /*\n    Function that will gradually show each of the sets of lines (the\n    svg objects) such that the system appears to \"grow\"\n  */\n  async grow(){\n    const turtleLines = this.state.turtleLines;\n    \n    this.setState(prevState => {\n        return {\n          needsToGrow: false,\n          inGrowth: true,\n        };\n    });\n    \n    for (var i = 0; i < turtleLines.size; i++) {  \n      \n      if (i !== 0) {\n        turtleLines.get(i-1).visibility = \"hidden drawArea\";\n      }\n      turtleLines.get(i).visibility = \"drawArea\";\n      this.setState(prevState => {\n        return {\n          turtleLines: turtleLines,\n        };\n      }); \n      await this.sleep(250);\n    }\n    \n  }\n  \n\n  // ----------- OVERRIDING COMPONENT METHODS BELOW HERE ----------------\n  \n  // Before it first loads, run the\n  // turtle to draw the needed lines.\n  // (This method is deprecated, but it's what we need -- \n  // sorry, React developers)\n  UNSAFE_componentWillMount() {\n    this.drawLSystem();\n  }\n  \n  // And, after everything is drawn and\n  // loaded, \"grow\" the system\n  componentDidMount() {\n    this.grow();\n  }\n  \n  \n  // We only want to actually update the component under three conditions:\n  // 1) If the rule has changed\n  // 2) If we need to \"grow\" the system\n  // 3) If we're actually in the process of growing the system\n  shouldComponentUpdate(nextProps, nextState) {\n    return nextProps.rule !== this.props.rule || this.state.needsToGrow || this.state.inGrowth;\n  }\n  \n  \n  // Every time an update happens, check to see if \n  // our parent has changed our rules and, if so, recreate\n  // the lines\n  componentDidUpdate(previousProps, previousState) {\n\n    // Because componentDidUpdate will get called on\n    // any update of state (including, for instance,\n    // adding a new line), only reset and redraw\n    // if the thing being changed is the rule. (Note\n    // that because we've overridden shouldComponentUpdate we \n    // should never get here in the first place, but we're\n    // being safe.)\n    if (previousProps.rule !== this.props.rule) {\n      // The rule has been changed;\n      // reset our state. \n      this.setState(prevState => {\n        return {\n          turtleInstructions: Immutable.List(),\n          turtleLines: Immutable.List(),\n          needsToGrow: false,\n          inGrowth: false,\n        };\n      }); \n      this.drawLSystem();\n    } else if (this.state.needsToGrow) {\n      // We need to grow! Call the \"grow\"\n      // function.\n      this.grow();\n    }\n  }\n  \n\n  /*\n   The actual render, finally!\n  */\n  render() {\n    const turtleLines = this.state.turtleLines;\n    \n    return (\n      <div>\n      {turtleLines.map((turtle, i) => (\n        <TurtleShape key={i} visibility={turtle.visibility} turtleLines={turtle.lines} />\n      ))}\n    </div>\n    );\n  }\n}\n\nexport default LSystem;\n","import React, { Component } from 'react'\n\nclass Form extends Component {\n  constructor(props) {\n    super(props)\n\n    this.initialState = {\n      angle: props.rule.angle,\n      step: props.rule.step,\n      axiom: props.rule.axiom,\n      replacements: props.rule.replacements,\n      loops: props.rule.loops,\n      startX: props.rule.startX,\n      startY: props.rule.startY\n    }\n\n    this.state = this.initialState\n  }\n  \n  handleChange = event => {\n    const { name, value } = event.target\n  \n    this.setState({\n      [name]: value,\n    })\n  }\n  \n  submitForm = () => {\n    this.props.handleSubmit(this.state)\n  }\n  \n  render() {\n    const { angle,\n      step,\n      axiom,\n      replacements,\n      loops,\n      startX,\n      startY } = this.state;\n  \n    return (\n      \n      <div className=\"instructions\">\n      <h3>Instructions</h3>\n      <div>\n        To run an L-System, enter the required information and press \"submit\". Some notes:\n        <ul>\n        <li>The \"Replacement Rule\" should consist one or more comma-separated replacement rules, of the format \"( X = Y )\" -- see examples, below</li>\n        <li>The rules use the following symbols:\n          <ul>\n          <li>'F' and 'G' each draw a single line segment</li>\n          <li>'+' and '-' rotate the turtle to the left and right respectively (by the defined angle)</li>\n          <li>'[' and ']' store and recall a particular XY coordinate for the turtle (i.e. allow the turtle to return to a previous location)</li>\n          <li>'!' will draw a line segment that is larger if it's older, by a factor of how many generations old it is. In other words, \n            a '!' that is added to the output string in the first loop will be 6 times longer than a '!' that's added to the \n            output string in the sixth loop.</li> \n          <li>'X' and 'Y' are no-ops and are used as placeholders in the rules</li>\n          <li>All other characters are ignored</li>\n          </ul>\n        </li>\n        <li>PLEASE don't use more than 6 recursions!</li>\n        <li>If you're having trouble seeing the entire resulting drawing, try reducing the \"Step Size\" to make it smaller</li>\n        <li>NOTE: INPUTS ARE NOT CURRENTLY BEING SANITIZED! If you get an error, probably it's a parsing issue. Check your rules in particular.</li>\n        </ul>\n      </div>\n      \n      <hr />\n      \n      <h3>L-System rules</h3>\n      <form>\n        <label>Axiom (initial string)</label>\n        <input\n          type=\"text\"\n          name=\"axiom\"\n          size=\"10\"\n          value={axiom}\n          onChange={this.handleChange} />\n        \n        <br />\n        <label>Replacement Rules</label>\n        <input\n          type=\"text\"\n          name=\"replacements\"\n          size=\"50\"\n          value={replacements}\n          onChange={this.handleChange} />\n        \n        <br />\n        <label>Angle for Turns</label>\n        <input\n          type=\"text\"\n          name=\"angle\"\n          size=\"5\"\n          value={angle}\n          onChange={this.handleChange} />\n          \n        <br />\n        <label>Step Size (length of line)</label>\n        <input\n          type=\"text\"\n          name=\"step\"\n          size=\"5\"\n          value={step}\n          onChange={this.handleChange} />\n          \n        <br />\n        <label>Loops (number of recursions)</label>\n        <input\n          type=\"text\"\n          name=\"loops\"\n          size=\"5\"\n          value={loops}\n          onChange={this.handleChange} />\n          \n        <br />\n        <label>Initial X Position</label>\n        <input\n          type=\"text\"\n          name=\"startX\"\n          size=\"5\"\n          value={startX}\n          onChange={this.handleChange} />\n        <label>Initial Y Position</label>\n        <input\n          type=\"text\"\n          name=\"startY\"\n          size=\"5\"\n          value={startY}\n          onChange={this.handleChange} />\n          \n        <br />\n        <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\n      </form>\n      \n      <hr />\n      \n      <h3>Examples</h3>\n      <div>\n      <ul>\n      <li>Sierpinski triangle:\n        <ul>\n          <li>Axiom: F-G-G</li>\n          <li>Replacement Rules: (F = F-G+F+G-F), (G = GG)</li>\n          <li>Angle: 120</li>\n          <li>Step Size: 7</li>\n          <li>Loops: 6</li>\n          <li>Initial X: 10</li>\n          <li>Initial Y: 600</li>\n        </ul>\n      </li>\n      \n      <li>Thorny bush:\n        <ul>\n          <li>Axiom: F</li>\n          <li>Replacement Rules: (F = ![-----F][+++++++F]+![----F][+++++++F]+![---F][+++++F]+!F)</li>\n          <li>Angle: 6</li>\n          <li>Step Size: 25</li>\n          <li>Loops: 3</li>\n          <li>Initial X: 300</li>\n          <li>Initial Y: 600</li>\n        </ul>\n      </li>\n      \n      <li>Fractal plant:\n        <ul>\n          <li>Axiom: X</li>\n          <li>Replacement Rules: (X = F+[[X]-X]-F[-FX]+X), (F = FF)</li>\n          <li>Angle: 25</li>\n          <li>Step Size: 3</li>\n          <li>Loops: 6</li>\n          <li>Initial X: 200</li>\n          <li>Initial Y: 600</li>\n        </ul>\n      </li>\n      \n      <li>Binary tree:\n        <ul>\n          <li>Axiom: F</li>\n          <li>Replacement Rules: (G = GG), (F = G[+F]-F)</li>\n          <li>Angle: 25</li>\n          <li>Step Size: 4</li>\n          <li>Loops: 7</li>\n          <li>Initial X: 300</li>\n          <li>Initial Y: 600</li>\n        </ul>\n      </li>\n      \n      \n      <li>Koch curve\n        <ul>\n          <li>Axiom: F</li>\n          <li>Replacement Rules: (F = F+F-F-F+F)</li>\n          <li>Angle: 90</li>\n          <li>Step Size: 4</li>\n          <li>Loops: 4</li>\n          <li>Initial X: 300</li>\n          <li>Initial Y: 600</li>\n        </ul>\n      </li>\n      \n      \n      <li>Dragon curve\n        <ul>\n          <li>Axiom: FX</li>\n          <li>Replacement Rules: (X = X+YF+), (Y = -FX-Y)</li>\n          <li>Angle: 90</li>\n          <li>Step Size: 4</li>\n          <li>Loops: 12 <i>(Dragons get special dispensation for extra loops)</i></li>\n          <li>Initial X: 300</li>\n          <li>Initial Y: 200</li>\n        </ul>\n      </li>\n      \n      </ul>\n      </div>\n      </div>\n    );\n  }\n}\n\n  export default Form;","import React, { Component } from 'react'\nimport LSystem from './LSystem'\nimport Form from './Form'\n\nclass Home extends Component {\n  constructor(props) {\n    super(props)\n  \n    this.initialState = {\n      // 'Thorny bush'\n      rule: {\n        angle: '6',\n        step: '25',\n        axiom: 'F',\n        replacements: '(F = ![-----F][+++++++F]+![----F][+++++++F]+![---F][+++++F]+!F)',\n        loops: '3',\n        startX: '300',\n        startY: '600'\n      }\n    }\n    \n    this.state = this.initialState\n  }\n\n  handleSubmit = newRule => {\n    this.setState({ rule: newRule });\n  }\n\n  \n  render() {\n    const { rule } = this.state\n    \n    return (\n    <div>\n      <div className=\"container\">\n        <Form handleSubmit={this.handleSubmit} rule={rule} />\n        <LSystem rule={rule} colorful=\"true\"/>\n      </div>\n    </div>\n    )\n  };\n}\nexport default Home\n","import Immutable from 'immutable'\n\n// A dictionary of organisms. Note\n// that these don't have default X and Y\n// values set, so you're probably going to \n// want to do something like this:\n// \n// myOrganism = Object.assign({}, Organisms.get(\"algae\").rules, {startX: '60', startY: '120'}) \nconst Organisms = Immutable.Map(\n    ).set(\"binaryTree\",\n      {\n        resources: {\n          nitrogen: '-1',\n          oxygen: '+1',\n          carbonDioxide: '-1'\n          \n        },\n        rules: {\n          angle: '25',\n          step: '1',\n          axiom: 'F',\n          replacements: '(G = GG), (F = G[+F]-F)',\n          loops: '6'\n        }\n      }\n    ).set(\"algae\",\n      {\n        resources: {\n          nitrogen: '-1',\n          oxygen: '+1',\n          carbonDioxide: '-1'\n          \n        },\n        rules: {\n          angle: '20',\n          step: '4',\n          axiom: 'F',\n          replacements: '(F = F[+F]F[-F]F)',\n          loops: '3'\n        }\n      }\n    ).set(\"bush\",\n      {\n        resources: {\n          nitrogen: '-1',\n          oxygen: '+1',\n          carbonDioxide: '-1'\n          \n        },\n        rules: {\n          angle: '25',\n          step: '5',\n          axiom: 'X',\n          replacements: '(X = F-[[X]+X]+F[-FX]+X)',\n          loops: '4'\n        }\n      }\n    ).set(\"dragon\",\n      {\n        resources: {\n          nitrogen: '-1',\n          oxygen: '+1',\n          carbonDioxide: '-1'\n          \n        },\n        rules: {\n          angle: '90',\n          step: '2',\n          axiom: 'FX',\n          replacements: '(X = X+YF+), (Y = -FX-Y)',\n          loops: '8'\n        }\n      }\n    ).set(\"fractalPlant\",\n      {\n        resources: {\n          nitrogen: '-1',\n          oxygen: '+1',\n          carbonDioxide: '-1'\n          \n        },\n        rules: {\n          angle: '25',\n          step: '2',\n          axiom: 'X',\n          replacements: '(X = F+[[X]-X]-F[-FX]+X), (F = FF)',\n          loops: '4'\n        }\n      }\n    ).set(\"thornyBush\",\n      {\n        resources: {\n          nitrogen: '-1',\n          oxygen: '+1',\n          carbonDioxide: '-1'\n          \n        },\n        rules: {\n          angle: '6',\n          step: '5',\n          axiom: 'F',\n          replacements: '(F = ![-----F][+++++++F]+![----F][+++++++F]+![---F][+++++F]+!F)',\n          loops: '3'\n        }\n      }\n    )\n\nexport default Organisms;","import React, { Component } from 'react'\nimport Immutable from 'immutable'\nimport LSystem from './LSystem'\nimport Organisms from './Organisms'\n\n\nclass Garden extends Component {\n  constructor(props) {\n    super(props)\n    \n    /*\n    The drawArea is 600x600, and we want to divide it into\n    25 squares. Therefore, each organism should take up the following \"plots\":\n    0-120|120, 121-240|120, 241-360|120, 361-480|120, 481-600|120\n    0-120|240, 121-240|240, 241-360|240, 361-480|240, 481-600|240\n    etc.\n    */\n  \n    this.initialState = {\n      organisms: Immutable.List()\n      .push(Object.assign({}, Organisms.get(\"binaryTree\").rules, {startX: '60', startY: '120'}))\n      .push(Object.assign({}, Organisms.get(\"bush\").rules, {startX: '180', startY: '120'}))\n      .push(Object.assign({}, Organisms.get(\"dragon\").rules, {startX: '300', startY: '90'}))\n      .push(Object.assign({}, Organisms.get(\"algae\").rules, {startX: '420', startY: '120'}))\n      .push(Object.assign({}, Organisms.get(\"fractalPlant\").rules, {startX: '540', startY: '120'}))\n      \n      .push(Object.assign({}, Organisms.get(\"fractalPlant\").rules, {startX: '60', startY: '240'}))\n      .push(Object.assign({}, Organisms.get(\"binaryTree\").rules, {startX: '180', startY: '240'}))\n      .push(Object.assign({}, Organisms.get(\"dragon\").rules, {startX: '300', startY: '210'}))\n      .push(Object.assign({}, Organisms.get(\"algae\").rules, {startX: '420', startY: '240'}))\n      .push(Object.assign({}, Organisms.get(\"binaryTree\").rules, {startX: '540', startY: '240'}))\n      \n      .push(Object.assign({}, Organisms.get(\"binaryTree\").rules, {startX: '60', startY: '360'}))\n      .push(Object.assign({}, Organisms.get(\"thornyBush\").rules, {startX: '180', startY: '360'}))\n      .push(Object.assign({}, Organisms.get(\"fractalPlant\").rules, {startX: '300', startY: '360'}))\n      .push(Object.assign({}, Organisms.get(\"dragon\").rules, {startX: '420', startY: '330'}))\n      .push(Object.assign({}, Organisms.get(\"algae\").rules, {startX: '540', startY: '360'}))\n      \n      .push(Object.assign({}, Organisms.get(\"dragon\").rules, {startX: '60', startY: '450'}))\n      .push(Object.assign({}, Organisms.get(\"bush\").rules, {startX: '180', startY: '480'}))\n      .push(Object.assign({}, Organisms.get(\"dragon\").rules, {startX: '300', startY: '450'}))\n      .push(Object.assign({}, Organisms.get(\"thornyBush\").rules, {startX: '420', startY: '480'}))\n      .push(Object.assign({}, Organisms.get(\"fractalPlant\").rules, {startX: '540', startY: '480'}))\n      \n      .push(Object.assign({}, Organisms.get(\"dragon\").rules, {startX: '60', startY: '570'}))\n      .push(Object.assign({}, Organisms.get(\"fractalPlant\").rules, {startX: '180', startY: '600'}))\n      .push(Object.assign({}, Organisms.get(\"dragon\").rules, {startX: '300', startY: '570'}))\n      .push(Object.assign({}, Organisms.get(\"algae\").rules, {startX: '420', startY: '600'}))\n      .push(Object.assign({}, Organisms.get(\"fractalPlant\").rules, {startX: '540', startY: '600'}))\n      \n    }\n  \n    this.state = this.initialState\n  }\n  \n  render() {\n    const organisms = this.state.organisms;\n    \n    return (\n    <div>\n      <div className=\"container\">\n      {organisms.map((rule, i) => (\n        <LSystem rule={rule} grow=\"0\" colorful=\"true\"/>\n      ))}\n      </div>\n\n    </div>\n    )\n    \n  }\n}\nexport default Garden\n","import React, { Component } from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\"\nimport Home from './Home'\nimport Garden from './Garden'\n\nclass App extends Component {\n  \n  render() {\n    \n    return (\n    <Router>\n    <p>Welcome to my garden! This is a safe space for L-System plants to grow and flourish. \n    &nbsp; <Link to=\"/\">Home</Link> | <Link to=\"/garden\">Garden</Link></p>\n    \n            \n        <Switch>\n          <Route path=\"/garden\">\n            <Garden />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      \n    </Router>\n    );\n  }\n  \n  \n  \n}\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}