{"version":3,"sources":["TurtleLine.js","TurtleShape.js","LSystem.js","Organisms.js","Form.js","Home.js","Garden.js","Intro.js","Outro.js","App.js","index.js"],"names":["TurtleLine","this","props","line","color","pathData","map","p","get","join","className","stroke","d","Component","TurtleShape","turtleLines","visibility","lines","index","key","LSystem","sleep","milliseconds","Promise","resolve","setTimeout","state","turtleInstructions","Immutable","List","needsToGrow","currentRule","rule","instructions","axiom","addGrowSteps","replacements","split","subst","findString","replace","trim","newString","push","turtleString","expandInstructions","i","loops","runTurtle","setState","prevState","inputString","generation","debug","outputString","console","log","token","matched","replacement","angle","Math","PI","min","max","floor","random","item","ruleAngle","Number","ruleStep","step","fColor","toUpperCase","gColor","bangColor","currentAngle","currentX","startX","currentY","startY","locations","Stack","stepColor","stepSize","turnAngle","turnDirection","length","c","charAt","String","randomInteger","padStart","wrongStepChance","n","point1","Map","x","y","cos","toRadians","sin","point2","wrongAngleChance","wrongTurnChance","currPos","X","Y","A","oldPos","first","pop","inGrowth","size","drawLSystem","grow","nextProps","nextState","previousProps","previousState","turtle","Organisms","OrderedMap","set","rules","gardenStep","gardenLoops","Form","handleChange","event","target","value","type","checked","name","fillRules","newRule","submitForm","randomNumberForFormSubmittal","handleSubmit","initialState","self","toArray","onClick","onChange","Home","allOrgs","toList","numOrgs","randomIndex","Object","assign","Garden","triggerBreeze","a","async","wave","shuffle","slice","newOrganisms","organisms","iteration","forceUpdate","org","randomNumber","Intro","showAnswer","element","document","getElementById","ReactDOM","findDOMNode","style","display","turnPage","querySelectorAll","forEach","refs","id","page","ref","href","class","src","alt","width","Outro","App","to","path","render"],"mappings":"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","file":"static/js/main.4ab02517.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass TurtleLine extends Component {  \n  render() {\n    const { line, color } = this.props;\n    \n    const pathData = \"M \" + line\n      .map(p => p.get('x') + ' ' + p.get('y'))\n      .join(\" L \");\n\n    return <path className='path' stroke={color} d={pathData} />;\n    \n  }\n}\n\nexport default TurtleLine;\n","import React, { Component } from 'react'\nimport TurtleLine from './TurtleLine'\n\nclass TurtleShape extends Component {  \n  \n  render() {\n    const turtleLines = this.props.turtleLines;\n    const visibility = this.props.visibility;\n    return (\n      <svg className={visibility}>\n        {turtleLines.map((lines, index) => (\n          <TurtleLine key={index} line={lines.get(\"line\")} color={lines.get(\"color\")} />\n        ))}\n      </svg>\n    );\n    \n  }\n}\n\nexport default TurtleShape;\n","import React, { Component } from 'react'\nimport Immutable from 'immutable'\nimport TurtleShape from './TurtleShape'\n\nclass LSystem extends Component {\n  constructor(props) {\n    /*\n      The propery handed in should be an object called \"rule\", with\n      the following keys:\n        axiom: The initial string\n        numloops: How many times to run the replacement algorithm\n        replacements: One or more comma-separated replacement rules, of the format \"X = Y\" \n        step: How many pixels to draw each line\n        angle: The angle to turn when turning\n        startX: The X position at which to start drawing\n        startY: The Y position at which to start drawing\n        fColor,\n        gColor,\n        bangColor: The color codes to use for F, G, and ! lines respectively (defaults to \"random\")\n        currentRule: Boolean saying whether to draw the growing process or jump straight to the final design\n    */\n    super(props);\n    \n    /*\n      In this component's state, we'll keep track of the following:\n        turtleInstructions: A list of the expanded instructions (one entry for\n            each loop through the rewriting process)\n        turtleLines: A list of structures which contain the following:\n            visibility: The class names for the wrapping svg object \n            lines: A list of the actual TurtleLine components that will get rendered --\n                  these are (somewhat confusingly) a Map with keys \"line\" (X/Y coordinates as a List)\n                  and \"color\" (a color for that particular line)\n        needsToGrow: For complicated React reasons, a boolean indicating whether or not\n            we've gone through the \"growing\" render process for this particular L-system\n    */\n    \n    this.state = {\n      turtleInstructions: Immutable.List(),\n      turtleLines: Immutable.List(),\n      needsToGrow: false,\n    }\n\n  }\n  \n  /*\n    The main function that will generate the turtle drawing instructions\n    for each iteration, and populate this.state accordingly.\n  */\n  drawLSystem() {\n    const currentRule = this.props.rule;  // The information about how to build the system\n    var instructions = currentRule.axiom; // The starting point\n    var addGrowSteps = ('addGrowSteps' in currentRule && \n      currentRule.addGrowSteps); // Whether or not to add all of the \"steps\" to show \"growth\"\n    var replacements = []; // The actual replacement rules to perform (a list of objects  \n                           // with \"findString\" and \"newString\" keys)\n      \n    const debug = false; // Will output to console.log with replacement string information\n    \n    // Parse the replacement instructions\n    for (const replacement of currentRule.replacements.split(',')) {\n      const rule = replacement.split('=');\n      const subst = {findString: rule[0].replace(/\\(/,\"\").trim(), newString: rule[1].replace(/\\)/,\"\").trim()};\n      replacements.push(subst);\n    }\n    \n    // Loop N times, and for each loop, expand the instructions\n    // and create the relevant TurtleLines\n    for (var i = 0; i < currentRule.loops; i++) {\n      const turtleString = this.expandInstructions(instructions, replacements, i, debug);\n      \n      // If we're supposed to add each of the growth \"steps\"\n      // (or if this is the last step), add it to the state\n      var add = (addGrowSteps || i === currentRule.loops - 1);\n      if (add) {\n        const turtleLines = this.runTurtle(turtleString);\n        // Add this loop's instructions and TurtleLines to our state\n        this.setState(prevState => {\n          return {\n            turtleInstructions: prevState.turtleInstructions.push(turtleString),\n            turtleLines: prevState.turtleLines.push(turtleLines),\n          };\n        });\n      }; \n      \n      // Reset the instructions to the current turtle string in preparation for the next loop\n      instructions = turtleString;\n    }\n    \n    // After we're done updating state with all of the appropriate turtle lines,\n    // indicate to ourselves that we need to grow. (i.e. to show the actual rendering of the lines)\n    this.setState(prevState => {\n        return {\n          needsToGrow: true,\n        };\n    });\n  }\n  \n  \n  /* \n    Expansion function for a given \"loop\" of instruction generation\n  */\n  expandInstructions(inputString, replacements, generation, debug) {\n    \n    var outputString = '';\n    \n    if (debug) {\n      console.log(\"----------------\");\n      console.log(\" Generation \" + generation);\n      console.log(\"Starting with: \" + inputString);\n    }\n    \n    for(const token of inputString) {\n      var matched = false;\n      \n      if (token === '!') {\n        // If an exclamation point is in the input string, it needs\n        // to get \"older\" -- its age is tracked by having a bunch of\n        // '*' symbols after it (one '|' for each generation older than one)\n        outputString += \"!*\";\n        // any other \"*\"s after it will just be passed through as normal\n        if (debug) console.log(\"Replacing ! with !*\");\n        \n      } else {\n        \n        for(const replacement of replacements) {\n          if (replacement.findString === token) {\n            matched = true;\n            outputString += replacement.newString;\n            if (debug) console.log(\"Replacing \" + replacement.findString + \" with \" + replacement.newString);\n            break;\n          }  \n        }\n        if (! matched) {\n          if (debug) console.log(\"Adding \" + token + \" as is\")\n          outputString += token; \n        }\n      }\n    }\n    \n    if (debug) {\n      console.log(\"Final expansion: \");\n      console.log(outputString);\n    }\n    \n    return outputString;\n  }\n  \n  \n  /*\n    Utility functions to make the math easier\n  */\n  toRadians(angle) {\n    return angle * (Math.PI / 180);\n  }\n  randomInteger(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) ) + min;\n  }\n  \n  /*\n    Function to send the turtle along the path of following a particular\n    instruction set and drawing out the lines necessary for it; note that\n    these lines are hidden to begin with, and need to go through the \"grow\"\n    process in order to be visible\n  */\n  runTurtle(item) {\n    // Get the base, constant information about this rule\n    const instructions = item;\n    const currentRule = this.props.rule;\n    const ruleAngle = Number(currentRule.angle);\n    const ruleStep = Number(currentRule.step);\n    \n    // Set our initial colors\n    var fColor = \"RANDOM\";\n    if ('fColor' in currentRule) fColor = currentRule.fColor;\n    fColor = fColor.toUpperCase();\n    var gColor = \"RANDOM\";\n    if ('gColor' in currentRule) gColor = currentRule.gColor;\n    gColor = gColor.toUpperCase();\n    var bangColor = \"RANDOM\";\n    if ('bangColor' in currentRule) bangColor = currentRule.bangColor;\n    bangColor = bangColor.toUpperCase();\n    \n    // Set our initial angle and X/Y coordinates\n    var currentAngle = 90;\n    var currentX = Number(currentRule.startX);\n    var currentY = Number(currentRule.startY);\n    var locations = Immutable.Stack();\n    \n    // This structure is what we'll ultimately add to this.state.turtleLines;\n    // Note that it's hidden by default in the CSS (the \"grow\" function shows it)\n    var turtleLines = {\n      visibility: \"hidden drawing\",\n      lines: Immutable.List(),\n    };\n    \n    // Initial values for variables that we'll use in the loop\n    var stepColor = \"#000000\";\n    var stepSize = ruleStep;\n    var turnAngle = ruleAngle;\n    var turnDirection = '+';\n    \n    // Okay, now loop over each character in the string\n    for (var i = 0; i < instructions.length; i++) {\n      const c = instructions.charAt(i).toUpperCase();\n      \n      // F and G mean \"draw the turtle one interval\"\n      if (c === 'F' || c === 'G' || c === '!') {\n        \n        // Set the color\n        if (c === 'F') {\n          stepColor = fColor;\n        } else if (c === 'G') {\n          stepColor = gColor;\n        } else if (c ==='!') {\n          stepColor = bangColor;\n        }\n        if (stepColor === 'RANDOM') {\n          stepColor = \"#00\" + String(this.randomInteger(0, 9999)).padStart(4, '0');\n        }\n        \n        // Set the length; start with what the rule says\n        stepSize = ruleStep;\n        \n        // Assuming it's not a \"!\" (we handle !s differently, below),\n        // Set the step size based on what the \"wrongStepChance\"\n        // is set to. (If the step size is supposed to be \"wrong\",\n        // the set it to a random size between 1 and twice the current step.)\n        if (c !== '!' && Math.random() < currentRule.wrongStepChance) {\n          stepSize = this.randomInteger(1, (2 * ruleStep));\n        }\n        \n        // If it's an exclamation point, we need to find out how big it's\n        // supposed to be depending on how many \"*\"s come after it\n        if (c === '!') {\n          var n = 1;\n          while (i + n < instructions.length && instructions.charAt(i + n) === '*') n++;\n          // Skootch forward to the end of the \"*\"s (less one, because the\n          // loop will add one to us regardless).\n          i = i + n - 1;\n          \n          // Okay, now we've moved our \"cursor\" through the instructions \n          // to the appropriate place, and 'n' contains the number of \"step sizes\" \n          // to move; multiply the original \"rule\" step size by n for this line.\n          stepSize = ruleStep * n;\n        }  \n        \n        // FINALLY! Add a line and move the turtle\n        const point1 = new Immutable.Map({x: currentX, y: currentY,});\n        currentX = currentX + stepSize * Math.cos(this.toRadians(currentAngle));\n        currentY = currentY - stepSize * Math.sin(this.toRadians(currentAngle));\n        const point2 = new Immutable.Map({x: currentX, y: currentY,});\n        \n        turtleLines.lines = turtleLines.lines.push(Immutable.Map({\n          line: Immutable.List([point1, point2]), \n          color: stepColor,\n        }));\n        \n      } else if (c === '+' || c === '-') {\n        \n        // Adjust the angle based on the rule's \"wrongAngleChance\")\n        turnAngle = ruleAngle;\n        if (Math.random() < currentRule.wrongAngleChance) {\n          // Add between -10 and 10 degrees so as not to mess \n          // with it TOO much\n          turnAngle = this.randomInteger(-10, 10);\n        }\n        \n        // Start with the prescribed turn direction\n        // ('+' is 'left'; '-' is 'right')\n        turnDirection = c;\n        // Then, the direction should be reversed some of the time\n        if (Math.random() < currentRule.wrongTurnChance) {\n          if (turnDirection === '+') turnDirection = '-';\n          else turnDirection = '+';\n        }\n        \n        if (turnDirection === '+') {\n          currentAngle += turnAngle;\n        } else {\n          currentAngle -= turnAngle;\n        }\n        \n      } else if (c === '[') {\n        // Push current value of X,Y from locations\n        const currPos = {X: currentX, Y: currentY, A: currentAngle};\n        locations = locations.push(currPos);\n      } else if (c === ']') {\n        // Reset current value of X,Y to that popped from locations\n        const oldPos = locations.first();\n        locations = locations.pop();\n        currentX = oldPos.X;\n        currentY = oldPos.Y;\n        currentAngle = oldPos.A;\n      } else if (c === 'X' || c === 'Y') {\n        // For completeness; no-op\n      }\n    }\n    return turtleLines;\n  }\n  \n  \n  /*\n    Utility method for sleeping (ugh javascript)\n  */\n  sleep = (milliseconds) => {\n    return new Promise(resolve => setTimeout(resolve, milliseconds))\n  }\n  \n  /*\n    Function that will gradually show each of the sets of lines (the\n    svg objects) such that the system appears to \"grow\"\n  */\n  async grow() {\n    const turtleLines = this.state.turtleLines;\n    \n    this.setState(prevState => {\n        return {\n          needsToGrow: false,\n          inGrowth: true,\n        };\n    });\n    \n    for (var i = 0; i < turtleLines.size; i++) {  \n      \n      if (i !== 0) {\n        turtleLines.get(i-1).visibility = \"hidden drawing\";\n      }\n      turtleLines.get(i).visibility = \"drawing\";\n      this.setState(prevState => {\n        return {\n          turtleLines: turtleLines,\n        };\n      }); \n      await this.sleep(250);\n    }\n    \n  }\n  \n\n  // ----------- OVERRIDING COMPONENT METHODS BELOW HERE ----------------\n  \n  // Before it first loads, run the\n  // turtle to draw the needed lines.\n  // (This method is deprecated, but it's what we need -- \n  // sorry, React developers)\n  UNSAFE_componentWillMount() {\n    this.drawLSystem();\n    \n  }\n  \n  // And, after everything is drawn and\n  // loaded, \"grow\" the system\n  componentDidMount() {\n    this.grow();\n  }\n  \n  \n  // We only want to actually update the component under three conditions:\n  // 1) If the rule has changed\n  // 2) If we need to \"grow\" the system\n  // 3) If we're actually in the process of growing the system\n  shouldComponentUpdate(nextProps, nextState) {\n    return nextProps.rule !== this.props.rule || this.state.needsToGrow || this.state.inGrowth;\n  }\n  \n  \n  // Every time an update happens, check to see if \n  // our parent has changed our rules and, if so, recreate\n  // the lines\n  componentDidUpdate(previousProps, previousState) {\n\n    // Because componentDidUpdate will get called on\n    // any update of state (including, for instance,\n    // adding a new line), only reset and redraw\n    // if the thing being changed is the rule. (Note\n    // that because we've overridden shouldComponentUpdate we \n    // should never get here in the first place, but we're\n    // being safe.)\n    if (previousProps.rule !== this.props.rule) {\n      // The rule has been changed;\n      // reset our state. \n      this.setState(prevState => {\n        return {\n          turtleInstructions: Immutable.List(),\n          turtleLines: Immutable.List(),\n          needsToGrow: false,\n          inGrowth: false,\n        };\n      }); \n      this.drawLSystem();\n    } else if (this.state.needsToGrow) {\n      // We need to grow! Call the \"grow\"\n      // function.\n      this.grow();\n    }\n  }\n  \n\n  /*\n   The actual render, finally!\n  */\n  render() {\n    const turtleLines = this.state.turtleLines;\n    \n    return (\n      <div>\n      {turtleLines.map((turtle, i) => (\n        <TurtleShape key={i} visibility={turtle.visibility} turtleLines={turtle.lines} />\n      ))}\n    </div>\n    );\n  }\n}\n\nexport default LSystem;\n","import Immutable from 'immutable'\n\n// A dictionary of organisms. Note\n// that these don't have default X and Y\n// values set, so you're probably going to \n// want to do something like this:\n// \n// myOrganism = Object.assign({}, Organisms.get(\"algae\").rules, {startX: '60', startY: '120'}) \nconst Organisms = Immutable.OrderedMap(\n    ).set(\"Sierpinski Triangle\",\n      {\n        rules: {\n          angle: '120',\n          step: '7',\n          axiom: 'F-G-G',\n          replacements: '(F = F-G+F+G-F), (G = GG)',\n          loops: '6',\n          fColor: 'RANDOM',\n          gColor: 'RANDOM',\n          bangColor: 'RANDOM',\n          startX: \"150\",\n          startY: \"500\",\n          gardenStep: '6',\n          gardenLoops: '3',\n          wrongStepChance: '0.00',\n          wrongTurnChance: '0.00',\n          wrongAngleChance: '0.00',\n        }\n      }\n    ).set(\"Koch Curve\",\n      {\n        rules: {\n          angle: '90',\n          step: '6',\n          axiom: '-F',\n          replacements:'(F = F+F-F-F+F)',\n          loops: '4',\n          fColor: 'RANDOM',\n          gColor: 'RANDOM',\n          bangColor: 'RANDOM',\n          startX: \"50\",\n          startY: \"500\",\n          gardenStep: '3',\n          gardenLoops: '3',\n          wrongStepChance: '0.00',\n          wrongTurnChance: '0.00',\n          wrongAngleChance: '0.00',\n        }\n      }\n     ).set(\"Kolam\",\n      {\n        rules: {\n          angle: \"15\",\n          step: \"10\",\n          axiom: \"GGGG\",\n          replacements: \"(G = X+X+X+X+X+X+), (X = [F+F+F+F[---X-Y]+++++F++++++++F-F-F-F]), (Y = [F+F+F+F[---Y]+++++F++++++++F-F-F-F])\",\n          loops: '5',\n          fColor: '#ff944d',\n          gColor: '#00ace6',\n          bangColor: 'RANDOM',\n          startX: \"300\",\n          startY: \"300\",\n          gardenStep: '5',\n          gardenLoops: '2',\n          wrongStepChance: '0.00',\n          wrongTurnChance: '0.00',\n          wrongAngleChance: '0.00',\n        }\n      }\n    ).set(\"Dragon Curve\",\n      {\n        rules: {\n          angle: '90',\n          step: '4',\n          axiom: 'FX',\n          replacements: '(X = X+YG+), (Y = -FX-Y), (G = F)',\n          loops: '12',\n          fColor: '#ac3939',\n          gColor: '#e60000',\n          bangColor: 'RANDOM',\n          startX: \"300\",\n          startY: \"300\",\n          gardenStep: '3',\n          gardenLoops: '6',\n          wrongStepChance: '0.00',\n          wrongTurnChance: '0.00',\n          wrongAngleChance: '0.00',\n        }\n      }\n    ).set(\"Anklets of Krishna\",\n      {\n        rules: {\n          angle: '90',\n          step: '4',\n          axiom: 'F+XF+F+XF',\n          replacements: '(X = XF-F-F+XF+F+XF-F-F+X)',\n          loops: '5',\n          fColor: 'RANDOM',\n          gColor: 'RANDOM',\n          bangColor: 'RANDOM',\n          startX: \"400\",\n          startY: \"400\",\n          gardenStep: '3',\n          gardenLoops: '3',\n          wrongStepChance: '0.00',\n          wrongTurnChance: '0.00',\n          wrongAngleChance: '0.00',\n        }\n      }\n    ).set(\"Gosper Curve\",\n      {\n        rules: {\n          angle: '60',\n          step: '9',\n          axiom: 'F',\n          replacements: '(F=F+G++G-F--FF-G+), (G=-F+GG++G+F--F-G)',\n          loops: '4',\n          fColor: '#996600',\n          gColor: '#ffaa80',\n          bangColor: '#996600',\n          startX: \"550\",\n          startY: \"250\",\n          gardenStep: '3',\n          gardenLoops: '3',\n          wrongStepChance: '0.00',\n          wrongTurnChance: '0.00',\n          wrongAngleChance: '0.00',\n        }\n      }\n      \n    ).set(\"Binary Tree\",\n      {\n        rules: {\n          angle: '25',\n          step: '4',\n          axiom: 'F',\n          replacements: '(G = GG), (F = G[+F]-F)',\n          loops: '7',\n          fColor: '#ff3399',\n          gColor: '#336600',\n          bangColor: '#336600',\n          startX: \"300\",\n          startY: \"600\",\n          gardenStep: '2',\n          gardenLoops: '5',\n          wrongStepChance: '0.25',\n          wrongTurnChance: '0.00',\n          wrongAngleChance: '0.25',\n        }\n      }\n    ).set(\"Dandelion\",\n      {\n        rules: {\n          angle: '60',\n          step: '12',\n          axiom: '!X!!FF',\n          replacements: '(F=F[-F][+F][F]), (X=[+G[-G[+G]][-G[+G]]!]Y[-G[+G]!]), (Y=GGG)',\n          loops: '5',\n          fColor: '#e6e600',\n          gColor: '#004d00',\n          bangColor: '#004d00',\n          startX: \"300\",\n          startY: \"600\",\n          gardenStep: '3',\n          gardenLoops: '4',\n          wrongStepChance: '0.00',\n          wrongTurnChance: '0.10',\n          wrongAngleChance: '0.05',\n        }\n      }\n    ).set(\"Feather Tree\",\n      {\n        rules: {\n          angle: '25',\n          step: '10',\n          axiom: '!!FF',\n          replacements: '(F=F[-F][+F[+F]]![+F][-F[-F]])',\n          loops: '4',\n          fColor: 'RANDOM',\n          gColor: 'RANDOM',\n          bangColor: '#008000',\n          startX: \"300\",\n          startY: \"600\",\n          gardenStep: '3',\n          gardenLoops: '3',\n          wrongStepChance: '0.30',\n          wrongTurnChance: '0.05',\n          wrongAngleChance: '0.00',\n        }\n      }\n    ).set(\"Algae\",\n      {\n        rules: {\n          angle: '20',\n          step: '15',\n          axiom: 'F',\n          replacements: '(F = F[+F]F[-F]F)',\n          loops: '3',\n          fColor: 'RANDOM',\n          gColor: 'RANDOM',\n          bangColor: 'RANDOM',\n          startX: \"300\",\n          startY: \"600\",\n          gardenStep: '3',\n          gardenLoops: '3',\n          wrongStepChance: '0.00',\n          wrongTurnChance: '0.75',\n          wrongAngleChance: '0.00',\n        }\n      }\n    ).set(\"Berry Bush\",\n      {\n        rules: {\n          angle: '25',\n          step: '4',\n          axiom: 'F',\n          replacements: '(F = G[+F][-F]GF), (G = GG)',\n          loops: '6',\n          fColor: '#bf00ff',\n          gColor: '#336600',\n          bangColor: '#009973',\n          startX: \"300\",\n          startY: \"600\",\n          gardenStep: '3',\n          gardenLoops: '4',\n          wrongStepChance: '0.50',\n          wrongTurnChance: '0.00',\n          wrongAngleChance: '0.50',\n        }\n      }\n    ).set(\"Little Bush\",\n      {\n        rules: {\n          angle: '23',\n          step: '20',\n          axiom: 'X',\n          replacements: '(X = F-[[X]+X]+F[-FX]+X)',\n          loops: '5',\n          fColor: 'RANDOM',\n          gColor: 'RANDOM',\n          bangColor: 'RANDOM',\n          startX: \"300\",\n          startY: \"600\",\n          gardenStep: '6',\n          gardenLoops: '4',\n          wrongStepChance: '0.00',\n          wrongTurnChance: '0.00',\n          wrongAngleChance: '0.75',\n        }\n      }\n    ).set(\"Fractal Plant\",\n      {\n        rules: {\n          angle: '25',\n          step: '7',\n          axiom: 'X',\n          replacements: '(X = F+[[X]-X]-F[-GX]+X), (F = FF), (G = GG)',\n          loops: '5',\n          fColor: '#336600',\n          gColor: '#86b300',\n          bangColor: '#336600',\n          startX: \"300\",\n          startY: \"600\",\n          gardenStep: '2',\n          gardenLoops: '4',\n          wrongStepChance: '0.25',\n          wrongTurnChance: '0.00',\n          wrongAngleChance: '0.25',\n        }\n      }\n    ).set(\"Thorny Bush\",\n      {\n        rules: {\n          angle: '6',\n          step: '25',\n          axiom: 'F',\n          replacements: '(F = ![-----F][+++++++F]+![----F][+++++++F]+![---F][+++++F]+!F)',\n          loops: '3',\n          fColor: '#99e6ff',\n          gColor: 'RANDOM',\n          bangColor: 'RANDOM',\n          startX: \"400\",\n          startY: \"600\",\n          gardenStep: '4',\n          gardenLoops: '3',\n          wrongStepChance: '0.00',\n          wrongTurnChance: '0.05',\n          wrongAngleChance: '0.15',\n          \n        }\n      }\n    ).set(\"Bushy Tree\",\n      {\n        rules: {\n          angle: '15',\n          step: '9',\n          axiom: '!F',\n          replacements:'(F=FF-[-F+F+F]+[+F-G-G]), (G=F)',\n          loops: '4',\n          fColor: '#996600',\n          gColor: '#ffaa80',\n          bangColor: '#996600',\n          startX: \"300\",\n          startY: \"600\",\n          gardenStep: '3',\n          gardenLoops: '3',\n          wrongStepChance: '0.05',\n          wrongTurnChance: '0.00',\n          wrongAngleChance: '0.10',\n        }\n      }\n    ).set(\"Thistle\",\n      {\n        rules: {\n          angle: '20',\n          step: '8',\n          axiom: '!!GF',\n          replacements:'(F=GGG-[-F+F+F]+[+F-F+F])',\n          loops: '4',\n          fColor: '#ff3399',\n          gColor: '#336600',\n          bangColor: '#336600',\n          startX: \"300\",\n          startY: \"600\",\n          gardenStep: '2',\n          gardenLoops: '3',\n          wrongStepChance: '0.10',\n          wrongTurnChance: '0.00',\n          wrongAngleChance: '0.10',\n        }\n      }\n    ).set(\"Christmas Tree\",\n      {\n        rules: {\n          angle: '18',\n          step: '11',\n          axiom: 'LSLFFF',\n          replacements:'(S=[+++G][---G]TS),(G=+H[-G]L),(H=-G[+H]L), (T=TL), (L=[-F[+F]F][+F[-F]F]F)',\n          loops: '10',\n          fColor: '#004d00',\n          gColor: 'RANDOM',\n          bangColor: 'RANDOM',\n          startX: \"300\",\n          startY: \"600\",\n          gardenStep: '5',\n          gardenLoops: '5',\n          wrongStepChance: '0.50',\n          wrongTurnChance: '0.00',\n          wrongAngleChance: '0.05',\n        }\n      }\n    )\n    /*\n    .set(\"Fern\",\n      {\n        rules: {\n          angle: '18',\n          step: '11',\n          axiom: 'LSLFFF',\n          replacements:'(S=[+++G][---G]TS),(G=+H[-G]L),(H=-G[+H]L), (T=TL), (L=[-F[+F]F][+F[-F]F]F)',\n          loops: '10',\n          fColor: 'RANDOM',\n          gColor: 'RANDOM',\n          bangColor: 'RANDOM',\n          startX: \"300\",\n          startY: \"600\",\n          gardenStep: '5',\n          gardenLoops: '5',\n          wrongStepChance: '0.50',\n          wrongTurnChance: '0.00',\n          wrongAngleChance: '0.05',\n        }\n      }\n    )\n    */\n    ;\n     \n\nexport default Organisms;","import React, { Component } from 'react'\nimport Organisms from './Organisms'\n\nclass Form extends Component {\n  constructor(props) {\n    super(props)\n\n    this.initialState = {\n      angle: props.rule.angle,\n      step: props.rule.step,\n      axiom: props.rule.axiom,\n      replacements: props.rule.replacements,\n      loops: props.rule.loops,\n      startX: props.rule.startX,\n      startY: props.rule.startY,\n      fColor: props.rule.fColor,\n      gColor: props.rule.gColor,\n      bangColor: props.rule.bangColor,\n      wrongStepChance: props.rule.wrongStepChance,\n      wrongTurnChance: props.rule.wrongTurnChance,\n      wrongAngleChance: props.rule.wrongAngleChance,\n      addGrowSteps: props.rule.addGrowSteps,\n    }\n\n    this.state = this.initialState;\n  }\n  \n  handleChange = event => {\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n    \n    this.setState({\n      [name]: value,\n    })\n  }\n  \n  fillRules = newRule => {\n    this.setState(\n      newRule\n    , () => this.submitForm());\n  }\n  \n  submitForm = () => {\n    // Always force a refresh when submitting the form\n    this.setState({\n      randomNumberForFormSubmittal: Math.random(),\n    }, () => this.props.handleSubmit(this.state, \"false\"));\n  }\n  \n  render() {\n    const { angle,\n      step,\n      axiom,\n      replacements,\n      loops,\n      startX,\n      startY,\n      fColor,\n      gColor,\n      bangColor,\n      wrongStepChance,\n      wrongTurnChance,\n      wrongAngleChance,\n      addGrowSteps } = this.state;\n    const self = this;\n    \n    return (\n      \n    <div>\n    \n      <div className=\"examples\">\n        <h3>Examples</h3>\n        <p>Click on the name to try it out! Rules will be \n        auto-populated in the form to the right.</p>\n        <ul className=\"columns\">\n        \n          {Organisms.toArray().map(function(key, i) {\n            return <li key={i}>\n                   <button onClick={() => self.fillRules({\n                      axiom: key[1]['rules']['axiom'],\n                      replacements: key[1]['rules']['replacements'],\n                      angle: key[1]['rules']['angle'],\n                      step: key[1]['rules']['step'],\n                      loops: key[1]['rules']['loops'],\n                      startX: key[1]['rules']['startX'],\n                      startY: key[1]['rules']['startY'],\n                      fColor: key[1]['rules']['fColor'],\n                      gColor: key[1]['rules']['gColor'],\n                      bangColor: key[1]['rules']['bangColor'],\n                      wrongStepChance: '0.00',\n                      wrongAngleChance: '0.00',\n                      wrongTurnChance: '0.00',\n                      addGrowSteps: true,\n                    })}>\n                  <strong>{key[0]}</strong>\n                  </button>\n                  </li>\n            })} \n        </ul>\n      </div>\n      \n      <div className=\"instructions\">\n        <h3>L-system rules</h3>\n        <form>\n          <label>Axiom (initial string)</label>\n          <input\n            type=\"text\"\n            name=\"axiom\"\n            size=\"10\"\n            value={axiom}\n            onChange={this.handleChange} />\n          \n          <br />\n          <label>Replacement Rules</label>\n          <input\n            type=\"text\"\n            name=\"replacements\"\n            size=\"50\"\n            value={replacements}\n            onChange={this.handleChange} />\n          \n          <br />\n          <label>Angle for Turns</label>\n          <input\n            type=\"text\"\n            name=\"angle\"\n            size=\"5\"\n            value={angle}\n            onChange={this.handleChange} />\n          <br />\n          <label>Step Size (length of line)</label>\n          <input\n            type=\"text\"\n            name=\"step\"\n            size=\"5\"\n            value={step}\n            onChange={this.handleChange} />\n          <br />\n          <label>Loops (number of recursions)</label>\n          <input\n            type=\"text\"\n            name=\"loops\"\n            size=\"5\"\n            value={loops}\n            onChange={this.handleChange} />\n          <br />\n          <label>Initial X Position</label>\n          <input\n            type=\"text\"\n            name=\"startX\"\n            size=\"5\"\n            value={startX}\n            onChange={this.handleChange} />\n          <label>Initial Y Position</label>\n          <input\n            type=\"text\"\n            name=\"startY\"\n            size=\"5\"\n            value={startY}\n            onChange={this.handleChange} />\n          <br />\n          <label>'F' Color</label>\n          <input\n            type=\"text\"\n            name=\"fColor\"\n            size=\"8\"\n            value={fColor}\n            onChange={this.handleChange} />\n          <label>'G' Color</label>\n          <input\n            type=\"text\"\n            name=\"gColor\"\n            size=\"8\"\n            value={gColor}\n            onChange={this.handleChange} />\n          <label>'!' Color</label>\n          <input\n            type=\"text\"\n            name=\"bangColor\"\n            size=\"8\"\n            value={bangColor}\n            onChange={this.handleChange} />\n          <br />\n          \n          \n          <label>Draw growth steps</label>\n          <input\n            type=\"checkbox\"\n            name=\"addGrowSteps\"\n            checked={addGrowSteps}\n            onChange={this.handleChange} />\n          \n          <br /><br />\n          <strong>Buy the turtle a drink!</strong>\n          <br />\n          Enter the following probabilities in decimal (e.g. 0.25 == 25% chance)\n          <br />\n          <input\n            type=\"text\"\n            name=\"wrongStepChance\"\n            size=\"8\"\n            value={wrongStepChance}\n            onChange={this.handleChange} />\n          <label>Probability that a step will be somewhat longer or shorter</label>\n          <br />\n          <input\n            type=\"text\"\n            name=\"wrongTurnChance\"\n            size=\"8\"\n            value={wrongTurnChance}\n            onChange={this.handleChange} />\n          <label>Probability of turning in the wrong direction</label>\n          <br />\n          <input\n            type=\"text\"\n            name=\"wrongAngleChance\"\n            size=\"8\"\n            value={wrongAngleChance}\n            onChange={this.handleChange} />\n          <label>Probability that a turn angle will be somewhat narrower or wider</label>\n          <br />\n          <input type=\"button\" value=\"Submit\" onClick={this.submitForm} />\n            \n        </form>\n      </div>\n      <div className=\"instructions\">\n        <h3>Instructions</h3>\n        To run an L-system, enter the required information and press \"submit\". Some notes:\n        <ul>\n        <li>The \"Replacement Rule\" should consist one or more comma-separated replacement rules, of the format \"( X = Y )\" -- see examples, below</li>\n        <li>The rules use the following symbols:\n          <ul>\n          <li>'F' and 'G' each draw a single line segment</li>\n          <li>'+' and '-' rotate the turtle to the left and right respectively (by the defined angle)</li>\n          <li>'[' and ']' store and recall a particular XY coordinate for the turtle (i.e. allow the turtle to teleport back to a previous location)</li>\n          <li>'!' will draw a line segment that is larger if it's older, by a factor of how many generations old it is. In other words, \n            a '!' that is added to the output string in the first loop will be 6 times longer than a '!' that's added to the \n            output string in the sixth loop.</li> \n          <li>'X', 'Y', and all other characters are no-ops and are used as placeholders in the rules for more complicated expansions \n            (see \"Christmas Tree\" for an example)</li>\n          </ul>\n        </li>\n        <li>Don't use too many recursions, or the JavaScript will freak out. Limiting to 6 loops is a good rule of thumb.</li>\n        <li>If you're having trouble seeing the entire resulting drawing, try reducing the \"Step Size\" to make it smaller</li>\n        <li>You can also use the \"F Color\", \"G Color\" and \"'!' Color\" fields to set colors for the various letters. If using hex colors,\n          please include the \"#\" at the beginning! (Set these to the string 'random' if you want it to just\n          choose some random colors from the blue-green spectrum for each line.)</li>\n        <li>NOTE: INPUTS ARE NOT CURRENTLY BEING SANITIZED! If you get an error, probably it's a parsing issue. Check your rules in particular.</li>\n        </ul>\n      </div>\n      \n      \n    </div>\n    );\n  }\n}\n\n  export default Form;","import React, { Component } from 'react'\nimport LSystem from './LSystem'\nimport Form from './Form'\nimport Organisms from './Organisms'\n\nclass Home extends Component {\n  constructor(props) {\n    super(props)\n  \n    const allOrgs = Organisms.toList();\n    const numOrgs = allOrgs.size;\n    var randomIndex = Math.floor(Math.random() * Math.floor(numOrgs));\n    var rules = allOrgs.get(randomIndex).rules;\n    \n    // On the first draw, always follow the rules\n    this.initialState = {\n      rule: Object.assign({}, rules, {addGrowSteps: true,\n          wrongStepChance: '0.00',\n          wrongTurnChance: '0.00',\n          wrongAngleChance: '0.00',}) \n    }\n    \n    this.state = this.initialState\n  }\n\n  handleSubmit = (newRule) => {\n    this.setState({ rule: newRule });\n  }\n\n  \n  render() {\n    const { rule } = this.state;\n    \n    return (\n    <div>\n      <div className=\"drawArea\">\n        <LSystem rule={rule} />\n      </div>\n      <Form handleSubmit={this.handleSubmit} rule={rule} />\n    </div>\n    )\n  };\n}\nexport default Home\n","import React, { Component } from 'react'\nimport Immutable from 'immutable'\nimport LSystem from './LSystem'\nimport Organisms from './Organisms'\n\n\nclass Garden extends Component {\n  constructor(props) {\n    super(props)\n\n  \n    this.initialState = {\n      organisms: Immutable.List(),\n    }\n  \n    this.state = this.initialState\n  }\n \n \n  // Before everything loads, grab 25\n  // random plants.\n  // (This method is deprecated, but it's what we need -- \n  // sorry, React developers)\n  UNSAFE_componentWillMount() {\n    this.shuffle(); \n  }\n  \n  /*\n    Utility method for sleeping (ugh javascript)\n  */\n  sleep = (milliseconds) => {\n    return new Promise(resolve => setTimeout(resolve, milliseconds))\n  }\n  \n  /*\n    Kick off some \"waving\" in the breeze...\n  */\n  triggerBreeze = () => {\n    (async () => {\n        console.log('function2');\n        await this.wave(1);\n    })();\n  }\n\n  async wave(iteration) {\n    console.log(iteration);\n    this.forceUpdate();\n    if (iteration < 20) {\n      await this.sleep(10);\n      \n      var newOrganisms = Immutable.List();\n      for (var i=0; i < 25; i++) {\n        var org = this.state.organisms.get(i);\n        newOrganisms = newOrganisms.push(Object.assign({}, org, {\n              wrongStepChance: '0.00',\n              wrongTurnChance: '0.00',\n              wrongAngleChance: '0.05',\n              randomNumber: Math.random(),\n          }));\n      }\n      this.setState({\n        organisms: newOrganisms,\n      }, () => this.wave(++iteration));\n    }\n    \n  }\n  \n  shuffle = () => {\n    // The first 6 \"\"organisms\" are too non-plantlike to use in a garden\n    const allOrgs = Immutable.List(Organisms).slice(6); \n    const numOrgs = allOrgs.size;\n    \n    var newOrganisms = Immutable.List();\n        \n    /*\n    The drawArea is 600x600, and we're dividing it into\n    25 squares.\n    */\n    \n    for (var x = 0; x <= 4; x++) {\n      for (var y = 0; y <= 4; y++) {\n        var randomIndex = Math.floor(Math.random() * Math.floor(numOrgs));\n        \n        var rules = allOrgs.get(randomIndex)[1].rules;\n        \n        // Each organism has its own starting point that\n        // will center it a garden bit; this is relative to\n        // a 600x600 grid for the main screen, so we need to\n        // scale it down for this smaller \"garden plot\"\n        var startX = (rules['startX'] / 600) * 120;\n        var startY = (rules['startY'] / 600) * 120;\n        \n        newOrganisms = newOrganisms.push(Object.assign({}, rules, {\n            startX: startX, \n            startY: startY,\n            step: rules['gardenStep'], \n            loops: rules['gardenLoops'],\n            name: allOrgs.get(randomIndex)[0],\n        }));\n      }\n    }\n    this.setState({\n      organisms: newOrganisms,\n    });\n  }\n  \n  \n  render() {\n    const organisms = this.state.organisms;\n    \n    return (\n    <div>\n      <div className=\"drawArea\">\n      {organisms.map((rule, i) => (\n        <div key={i} className=\"gardenPlot\">\n          <LSystem key={i} rule={rule} />\n          <div className=\"footnote\">{i+1}</div>\n        </div>\n      ))}\n      </div>\n      \n      <div className=\"instructions\">\n      <ol className=\"columns\">\n      {organisms.map((rule, i) => (\n        <li key={i}>{rule.name}</li>\n      ))}\n      </ol>\n      <div className=\"button\">\n        <button onClick={this.shuffle}>Shuffle</button>\n        <button onClick={this.triggerBreeze}>Breeze</button>\n      </div>\n      \n      </div>\n      \n    </div>\n    )\n    \n  }\n}\nexport default Garden\n","import React, { Component } from 'react'\nimport ReactDOM from 'react-dom'\n\nclass Intro extends Component {\n  constructor(props) {\n    super(props)\n    \n    // On the first draw, always follow the rules\n    this.initialState = {\n      page: 1,\n    }\n    \n    this.state = this.initialState;\n  }\n\n  // I don't even care about how you're supposed\n  // to do it anymore. React is making me crazy.\n  showAnswer = (event) => {\n    var element = document.getElementById('answer');\n    ReactDOM.findDOMNode(element).style.display = 'block';\n  }\n  \n  turnPage = (event) => {\n    var otherPages = document.querySelectorAll('div.slide');\n    otherPages.forEach(item => this.refs[item.id].className = 'hidden' );  \n    var selectedPage = this.refs[event.target.value];\n    selectedPage.className='selected slide';\n  }\n  \n  render() {\n    return (\n    <div>\n      <div className=\"selected slide\" id=\"1\" ref=\"1\">\n        <div className=\"pagination\">\n          <button onClick={this.turnPage} ref=\"page1button1\" value=\"1\" className=\"selected\">1</button>\n          <button onClick={this.turnPage} ref=\"page1button2\" value=\"2\">2</button>\n          <button onClick={this.turnPage} ref=\"page1button3\" value=\"3\">3</button>\n          <button onClick={this.turnPage} ref=\"page1button4\" value=\"4\">4</button>\n          <button onClick={this.turnPage} ref=\"page1button5\" value=\"5\">5</button>\n        </div>\n\n        <h2>What is an L-system?</h2>\n        \n        <p>\n        An L-system is a parallel rewriting system, and a type of formal grammar.\n        In short, it's a way of describing ... well, all sorts of stuff.<sup>1</sup>\n        </p>\n        <p>\n        According to <a href=\"https://en.wikipedia.org/wiki/L-system\" target=\"_new\">Wikipedia</a>:\n        <br />\n        <em>\"An L-system consists of an alphabet of symbols that can be used to make strings, \n        a collection of production rules that expand each symbol into some larger string of symbols, \n        an initial 'axiom' string from which to begin construction, \n        and a mechanism for translating the generated strings into geometric structures.\"</em>\n        </p>\n        <p> \n        You can think of it kind of like a computer programming language. In particular, it does a\n        lot of stuff with replacements and recursion.\n        </p>\n        <p>\n        L-systems were developed in 1968 by Aristid Lindenmayer, \n        a Hungarian theoretical biologist and botanist at the University of Utrecht.\n        He used L-systems to describe the behaviour of plant cells and to \n        model the growth processes of plant development. \n        </p>\n        <p>\n        Yeah, that's right, a botanist invented a programming language\n        so that he could describe algae.\n        </p>\n        \n        <div className=\"footnote\">\n        [1] <em><a href=\"https://www.sciencedirect.com/science/article/pii/S0022519369800305\" target=\"_new\">Computing ability of a developmental model for filamentous organisms</a></em> \n        </div>\n        <p>\n        &nbsp;\n        </p>\n      </div>\n      \n      <div className=\"slide hidden\" id=\"2\" ref=\"2\">\n        <div className=\"pagination\">\n          <button onClick={this.turnPage} ref=\"page2button1\" value=\"1\">1</button>\n          <button onClick={this.turnPage} ref=\"page2button2\" value=\"2\" className=\"selected\">2</button>\n          <button onClick={this.turnPage} ref=\"page2button3\" value=\"3\">3</button>\n          <button onClick={this.turnPage} ref=\"page2button4\" value=\"4\">4</button>\n          <button onClick={this.turnPage} ref=\"page2button5\" value=\"5\">5</button>\n        </div>\n\n        <h2>How Does it Work?</h2>\n        <p>\n        Evaluating an L-system consists of two main steps:\n        </p>\n        <ol>\n          <li>Compute a string that contains a set of instructions</li>\n          <li>Use a \"turtle\" to draw a shape by following the instructions</li>\n        </ol>\n        <h5>Example</h5>\n        <p>\n        Let's start with a vocabulary. L-system vocabularies can get\n        complicated, and different implementations use different symbols,\n        but these two symbols are pretty standard:\n        </p>\n          <ul>\n            <li>'F' means \"Draw a line segment\"</li>\n            <li>'+' means \"Turn\" (you get to choose the angle)</li> \n          </ul>        \n        \n        <p>\n        When we go to draw the L-system, we use a list of these symbols\n        and interpret them as instructions for drawing. For instance, the instructions \n        \"F+F\" mean \"draw a line segment, turn, and draw another line segment.\" \n        </p>\n      </div>\n      \n      <div className=\"slide hidden\" id=\"3\" ref=\"3\">\n        <div className=\"pagination\">\n          <button onClick={this.turnPage} ref=\"page3button1\" value=\"1\">1</button>\n          <button onClick={this.turnPage} ref=\"page3button2\" value=\"2\">2</button>\n          <button onClick={this.turnPage} ref=\"page3button3\" value=\"3\" className=\"selected\">3</button>\n          <button onClick={this.turnPage} ref=\"page3button4\" value=\"4\">4</button>\n          <button onClick={this.turnPage} ref=\"page3button5\" value=\"5\">5</button>\n        </div>\n        <h2>How Does it Work? (cont.)</h2>\n        <p>\n        Now you need a starting string (\"axiom\"). If you wanted you could just start with something\n        like \"F+F+F+F+\" right out of the gate and call it a day. (Or call it a square, if\n        you went with a 90 degree angle. Heh.) But that's boring.\n        </p>\n        <p>\n        The thing that makes L-systems interesting is their use of replacement rules. \n        So, for instance, you could say something like this:\n        </p>\n          <ul>\n            <li>Axiom: F</li>\n            <li>Replacement rule: F = F+F</li>\n            <li>Number of loops: 3</li>\n          </ul>\n        <p> \n        And when you evaluate it, you get this!\n        </p>\n          <ol class=\"zero_indexed\">\n            <li>F</li>\n            <li>F+F</li>\n            <li>F+F + F+F</li>\n            <li>F+F + F+F  +  F+F + F+F</li>\n          </ol>\n        \n      </div>\n      \n      <div className=\"slide hidden\" id=\"4\" ref=\"4\">\n        <div className=\"pagination\">\n          <button onClick={this.turnPage} ref=\"page4button1\" value=\"1\">1</button>\n          <button onClick={this.turnPage} ref=\"page4button2\" value=\"2\">2</button>\n          <button onClick={this.turnPage} ref=\"page4button3\" value=\"3\">3</button>\n          <button onClick={this.turnPage} ref=\"page4button4\" value=\"4\" className=\"selected\">4</button>\n          <button onClick={this.turnPage} ref=\"page4button5\" value=\"5\">5</button>\n        </div>\n\n        <h2>How Does it Work? (cont.)</h2>\n        <p>\n        We just evaluated our first L-system! We started with this:\n        </p>\n          <ul>\n            <li>Axiom: F</li>\n            <li>Replacement Rules: F=F+F</li>\n          </ul>\n        <p>\n        And after 3 loops, we ended up with \"F+F+F+F+F+F+F+F\". (Just\n        think of all of the Fs you could get using more loops.)\n        </p>\n        \n        <h5>Drawing</h5>\n        <p>\n        Okay, so in order to draw a shape for this L-system, there are a \n        couple additional parameters we need to specify:\n        </p>\n          <ul>\n            <li>Angle for turns (e.g. 45°)</li>\n            <li>Size for each line (e.g. 30px)</li> \n          </ul>        \n        \n        <p>\n        And once you've defined those, you just need to find a compliant turtle. <br /> \n        <img src=\"https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/google/223/turtle_1f422.png\"\n        alt=\"Turtle\" width=\"50\" /><br />\n        Tell your turtle servant to follow the instructions in your string. Again, \"F\" means draw a line segment (using\n        the length that you specified earlier), and \"+\" means turn (let's say left) by the angle\n        you specified.\n        </p>\n      </div>\n      \n      <div className=\"slide hidden\" id=\"5\" ref=\"5\">\n        <div className=\"pagination\">\n          <button onClick={this.turnPage} ref=\"page5button1\" value=\"1\">1</button>\n          <button onClick={this.turnPage} ref=\"page5button2\" value=\"2\">2</button>\n          <button onClick={this.turnPage} ref=\"page5button3\" value=\"3\">3</button>\n          <button onClick={this.turnPage} ref=\"page5button4\" value=\"4\">4</button>\n          <button onClick={this.turnPage} ref=\"page5button5\" value=\"5\" className=\"selected\">5</button>\n        </div>\n\n        <h2>Quiz Time!</h2>\n        <p>\n        Here are the rules:\n        </p>\n          <ul>\n            <li>Axiom: F</li>\n            <li>Replacement rule: F = F+F</li>\n            <li>Number of loops: 3</li>\n            <li>Step size: 30</li>\n            <li>Angle: 45</li>\n          </ul>\n        \n        <p>\n        And the answer is...\n        </p>\n        <div>\n          <button onClick={this.showAnswer}>Show Answer</button>\n          <img className=\"hidden\" id=\"answer\" alt=\"octagon\" src=\"octagon.png\" />  \n        </div>\n      </div>\n      \n    </div>\n    )\n  };\n}\nexport default Intro\n","import React, { Component } from 'react'\n\nclass Outro extends Component {\n  \n  render() {\n    return (\n    <div>\n      <div className=\"selected slide\" id=\"1\" ref=\"1\">\n        \n        <h2>What else?</h2>\n        \n        <p>\n        <a href=\"https://en.wikipedia.org/wiki/File:Fractal_tree_(Plate_b_-_2).jpg\" target=\"_new\"><img src=\"https://upload.wikimedia.org/wikipedia/commons/4/41/Fractal_tree_%28Plate_b_-_2%29.jpg\" alt=\"3D L-system tree from Wikipedia\" /></a>\n        </p>\n        \n        \n        \n        <p>\n        There are plenty of additional things that could be done with this application,\n        and with L-systems in general. They include (but are not limited to):\n        </p>\n        \n        <h5>3D L-systems</h5>\n        <p>\n        L-systems can be used for describing 3-dimensional systems and making 3D\n        drawings. (This is the number one thing I would love to extend this application to do.)\n        Check out the following sites for some cool examples of 3D L-systems:\n        </p>\n        <ul>\n        <li><a href=\"http://laurenslapre.nl/lapre_004.htm\" target=\"_new\">Lparser</a>, a software package for 3D L-systems</li>\n        <li><a href=\"https://commons.wikimedia.org/wiki/File:Dragon_trees.jpg\" target=\"_new\">These pictures</a> from Wikipedia</li>\n        <li><a href=\"https://www.sidefx.com/docs/houdini/nodes/sop/lsystem.html\" target=\"_new\">L-systems in Houdini</a></li>\n        </ul>\n        \n        \n        <h5>Variations of L-systems</h5>\n        <p>\n        Lindenmayer's original description of L-systems includes a whole lot of stuff that I didn't have time to\n        implement (including a 3D vocabulary). These include parametric L-systems (where functions and parameters can be used \n        in addition to simple rewriting), stochastic L-systems (a more formal vocabulary for randomization), and others.\n        These inclusions make L-system grammars Turing complete and enable description of pretty much everything. Check\n        out the following papers:\n        </p> \n        <ul>\n        <li><a href=\"http://algorithmicbotany.org/papers/abop/abop.pdf\" target=\"_new\">The Algorithmic Beauty of Plants</a></li>\n        <li><a href=\"http://algorithmicbotany.org/papers/lsfp.pdf\" target=\"_new\">Lindenmayer Systems, Fractals, and Plants</a></li>\n        </ul>\n        \n        \n        <h5>Further Reading</h5>\n        <p>\n        This presentation only scratched the surface of what's possible. Here are some good sites to visit to learn more:\n        </p> \n        <ul>\n        <li><a href=\"http://algorithmicbotany.org/\" target=\"_new\">The University of Calgary's Algorithmic Botany Department</a></li>\n        <li><a href=\"https://www.frontiersin.org/articles/10.3389/fpls.2012.00076/full\" target=\"_new\">L-Py: an L-system simulation framework for modeling plant architecture development based on a dynamic language</a></li>\n        <li><a href=\"https://www.reddit.com/r/proceduralgeneration/\" target=\"_new\">The \"Procedural Generation\" subreddit</a></li>\n        </ul>\n        \n      </div>\n    </div>\n    )\n  };\n}\nexport default Outro\n","import React, { Component } from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\"\nimport Home from './Home'\nimport Garden from './Garden'\nimport Intro from './Intro'\nimport Outro from './Outro'\n\nclass App extends Component {\n  \n  render() {\n    \n    return (\n    <Router>\n    <p>Welcome to my garden! This is a friendly place for happy L-system plants to grow and flourish. \n    &nbsp; <Link to=\"/intro\">Intro</Link> | <Link to=\"/\">Home</Link> | <Link to=\"/garden\">Garden</Link> | <Link to=\"/outro\">Outro</Link></p>\n    \n            \n        <Switch>\n          <Route path=\"/intro\">\n            <Intro />\n          </Route>\n          <Route path=\"/garden\">\n            <Garden />\n          </Route>\n          <Route path=\"/outro\">\n            <Outro />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n          \n        </Switch>\n      \n    </Router>\n    );\n  }\n}\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}